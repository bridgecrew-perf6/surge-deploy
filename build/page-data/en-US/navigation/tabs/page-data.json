{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/navigation/tabs","result":{"data":{"current":{"frontmatter":{"title":"Tabs","order":40,"brief":"When the content needs to be grouped and displayed in different modules or pages, you could use Tabs to switch between different groups or pages","icon":"doc-tabs"},"fields":{"type":"navigation"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#with-icon","title":"With Icon"},{"url":"#vertical-mode","title":"Vertical mode"},{"url":"#scrollable-tabs","title":"Scrollable Tabs"},{"url":"#disable","title":"Disable"},{"url":"#extra-content","title":"Extra Content"},{"url":"#custom-render","title":"Custom Render"},{"url":"#dynamic-update","title":"Dynamic Update"},{"url":"#closeable","title":"Closeable"}]},{"url":"#api-reference","title":"API Reference","items":[{"url":"#tab","title":"Tab"},{"url":"#tabpane","title":"TabPane"}]},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria","title":"ARIA"}]},{"url":"#design-token","title":"Design Token"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 40,\n  \"category\": \"Navigation\",\n  \"title\": \"Tabs\",\n  \"subTitle\": \"Tabs\",\n  \"icon\": \"doc-tabs\",\n  \"brief\": \"When the content needs to be grouped and displayed in different modules or pages, you could use Tabs to switch between different groups or pages\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Tbs supports three types of styles: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"line\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"card\"), \". By default, the first tab is selected. You could use either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabList\"), \" to pass in an array of tabs objects, or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<TabPane>\"), \" to create each tab. Mixed usage of two ways is not recommended and data in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabList\"), \" will be rendered with priority.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"When you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabList\"), \", only the current active tab will be rendered. For \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<TabPane>\"), \", all tabs will be rendered in DOM tree by default. You could set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keepDOM={false}\"), \" to only render current panel. No animation will be displayed in this case.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <div>\\n                <Tabs type=\\\"line\\\">\\n                    <TabPane tab=\\\"Document\\\" itemKey=\\\"1\\\">\\n                        <h3>Document</h3>\\n                        <p style={{ lineHeight: 1.8 }}>\\n                            Semi Design is a design system developed and maintained by IES Front-end Team and UED Team\\n                        </p>\\n                        <p style={{ lineHeight: 1.8 }}>\\n                            Semi Design create a consistent, good-looking, easy-to-use, and efficient user experience\\n                            with a user-centric, content-first, and human-friendly design system.\\n                        </p>\\n                        <ul>\\n                            <li>\\n                                <p>Content-first</p>\\n                            </li>\\n                            <li>\\n                                <p>Customized theming</p>\\n                            </li>\\n                            <li>\\n                                <p>Internationalized</p>\\n                            </li>\\n                            <li>\\n                                <p>Humanism</p>\\n                            </li>\\n                        </ul>\\n                    </TabPane>\\n                    <TabPane tab=\\\"Quick Start\\\" itemKey=\\\"2\\\">\\n                        <h3>Quick Start</h3>\\n                        <p style={{ lineHeight: 1.8 }}>\\n                            If it is a new project, it is recommended that you use Eden to initialize the project and\\n                            initialize the project type to select the React direction.\\n                        </p>\\n                        <pre\\n                            style={{\\n                                margin: '24px 0',\\n                                padding: '20px',\\n                                border: 'none',\\n                                whiteSpace: 'normal',\\n                                borderRadius: '6px',\\n                                color: 'var(--semi-color-text-1)',\\n                                backgroundColor: 'var(--semi-color-fill-0)',\\n                            }}\\n                        >\\n                            <code>\\n                                yarn add @douyinfe/semi-ui\\n                            </code>\\n                        </pre>\\n                    </TabPane>\\n                    <TabPane tab=\\\"Help\\\" itemKey=\\\"3\\\">\\n                        <h3>Help</h3>\\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\\n                            Q: Who should I look for if there are new component requirements, or existing component does\\n                            not meet my needs?\\n                        </p>\\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\\n                            {`Give feedbacks in the upper right corner, submit an Issue, describe your needs as well as\\n                            the business scenario. We'll handle these issues with priorities.`}\\n                        </p>\\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-0)', fontWeight: 600 }}>\\n                            Q: Have questions when using components?\\n                        </p>\\n                        <p style={{ lineHeight: 1.8, color: 'var(--semi-color-text-1)' }}>\\n                            Welcome to ask anything in our Lark customer service group.\\n                        </p>\\n                    </TabPane>\\n                </Tabs>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <Tabs type=\\\"button\\\">\\n                <TabPane tab=\\\"Document\\\" itemKey=\\\"1\\\">\\n                    Document\\n                </TabPane>\\n                <TabPane tab=\\\"Quick Start\\\" itemKey=\\\"2\\\">\\n                    Quick Start\\n                </TabPane>\\n                <TabPane tab=\\\"Help\\\" itemKey=\\\"3\\\">\\n                    Help\\n                </TabPane>\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs } from '@douyinfe/semi-ui';\\n\\nclass TabDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = { key: '1' };\\n        this.onTabClick = this.onTabClick.bind(this);\\n    }\\n\\n    onTabClick(key, type) {\\n        this.setState({ [type]: key });\\n    }\\n\\n    render() {\\n        // eslint-disable-next-line react/jsx-key\\n        const contentList = [<div>Document</div>, <div>Quick Start</div>, <div>Help</div>];\\n        const tabList = [\\n            { tab: 'Document', itemKey: '1' },\\n            { tab: 'Quick Start', itemKey: '2' },\\n            { tab: 'Help', itemKey: '3' },\\n        ];\\n        return (\\n            <Tabs\\n                type=\\\"card\\\"\\n                tabList={tabList}\\n                onChange={key => {\\n                    this.onTabClick(key, 'key');\\n                }}\\n            >\\n                {contentList[this.state.key - 1]}\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"With Icon\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\nimport { IconFile, IconGlobe, IconHelpCircle } from '@douyinfe/semi-icons';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <Tabs>\\n                <TabPane\\n                    tab={\\n                        <span>\\n                            <IconFile />\\n                            Document\\n                        </span>\\n                    }\\n                    itemKey=\\\"1\\\"\\n                >\\n                    Document\\n                </TabPane>\\n                <TabPane\\n                    tab={\\n                        <span>\\n                            <IconGlobe />\\n                            Quick Start\\n                        </span>\\n                    }\\n                    itemKey=\\\"2\\\"\\n                >\\n                    Quick Start\\n                </TabPane>\\n                <TabPane\\n                    tab={\\n                        <span>\\n                            <IconHelpCircle />\\n                            Help\\n                        </span>\\n                    }\\n                    itemKey=\\\"3\\\"\\n                >\\n                    Help\\n                </TabPane>\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Vertical mode\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Support two positions: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabPosition='left|top'\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane, Radio, RadioGroup } from '@douyinfe/semi-ui';\\nimport { IconFile, IconGlobe, IconHelpCircle } from '@douyinfe/semi-icons';\\n\\nclass App extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {\\n            type: 'line',\\n        };\\n    }\\n\\n    onSelect(e) {\\n        this.setState({\\n            type: e.target.value,\\n        });\\n    }\\n\\n    render() {\\n        return (\\n            <>\\n                <RadioGroup\\n                    onChange={e => this.onSelect(e)}\\n                    value={this.state.type}\\n                    style={{\\n                        display: 'flex',\\n                        justifyContent: 'center',\\n                    }}\\n                >\\n                    <Radio value={'line'}>Line</Radio>\\n                    <Radio value={'card'}>Card</Radio>\\n                    <Radio value={'button'}>Button</Radio>\\n                </RadioGroup>\\n                <br />\\n                <br />\\n                <Tabs tabPosition=\\\"left\\\" type={this.state.type}>\\n                    <TabPane\\n                        tab={\\n                            <span>\\n                                <IconFile />\\n                                Document\\n                            </span>\\n                        }\\n                        itemKey=\\\"1\\\"\\n                    >\\n                        <div style={{ padding: '0 24px' }}> Document </div>\\n                    </TabPane>\\n                    <TabPane\\n                        tab={\\n                            <span>\\n                                <IconGlobe />\\n                                Quick Start\\n                            </span>\\n                        }\\n                        itemKey=\\\"2\\\"\\n                    >\\n                        <div style={{ padding: '0 24px' }}>Quick Start</div>\\n                    </TabPane>\\n                    <TabPane\\n                        tab={\\n                            <span>\\n                                <IconHelpCircle />\\n                                Help\\n                            </span>\\n                        }\\n                        itemKey=\\\"3\\\"\\n                    >\\n                        <div style={{ padding: '0 24px' }}>Help</div>\\n                    </TabPane>\\n                </Tabs>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Scrollable Tabs\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"v>= 1.1.0\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"You could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"collapsible\"), \" for a scrollable tabs with dropdown menu. Horizontal mode only.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=column\",\n    \"live\": \"true\",\n    \"dir\": \"column\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <Tabs style={{ width: '60%', margin: '20px' }} type=\\\"card\\\" collapsible>\\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((item, index) => (\\n                    <TabPane tab={`Tab-${item}`} itemKey={`Tab-${item}`} key={item}>\\n                        Content of card tab {i}\\n                    </TabPane>\\n                ))}\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Disable\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Disable one tab.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <Tabs defaultActiveKey=\\\"1\\\">\\n                <TabPane tab=\\\"Document\\\" itemKey=\\\"1\\\">\\n                    Document\\n                </TabPane>\\n                <TabPane tab=\\\"Quick Start\\\" itemKey=\\\"2\\\" disabled>\\n                    Quick Start\\n                </TabPane>\\n                <TabPane tab=\\\"Help\\\" itemKey=\\\"3\\\">\\n                    Help\\n                </TabPane>\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Extra Content\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabBarExtraContent\"), \" to add extra content on the right side of tabBar.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane, Button } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <Tabs\\n                defaultActiveKey=\\\"1\\\"\\n                tabBarExtraContent={\\n                    <Button\\n                        onClick={() => {\\n                            alert('you have clicked me!');\\n                        }}\\n                    >\\n                        Extra Action\\n                    </Button>\\n                }\\n            >\\n                <TabPane tab=\\\"Document\\\" itemKey=\\\"1\\\">\\n                    Document\\n                </TabPane>\\n                <TabPane tab=\\\"Quick Start\\\" itemKey=\\\"2\\\">\\n                    Quick Start\\n                </TabPane>\\n                <TabPane tab=\\\"Help\\\" itemKey=\\\"3\\\">\\n                    Help\\n                </TabPane>\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Render\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderTabBar\"), \" to customize tabBar render behavior.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <Tabs\\n                defaultActiveKey=\\\"1\\\"\\n                renderTabBar={(tabBarProps, DefaultTabBar) => {\\n                    return (\\n                        <div className=\\\"tab-bar-box\\\">\\n                            This is a custom rendered tabBar. Current activeKey is: {tabBarProps.activeKey}\\n                            <DefaultTabBar {...tabBarProps} />\\n                        </div>\\n                    );\\n                }}\\n            >\\n                <TabPane tab=\\\"Document\\\" itemKey=\\\"1\\\">\\n                    Document\\n                </TabPane>\\n                <TabPane tab=\\\"Quick Start\\\" itemKey=\\\"2\\\">\\n                    Quick Start\\n                </TabPane>\\n                <TabPane tab=\\\"Help\\\" itemKey=\\\"3\\\">\\n                    Help\\n                </TabPane>\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Dynamic Update\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can add events to update tabBar dynamically.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane, ButtonGroup, Button } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.newTabIndex = 0;\\n        const panes = [\\n            { title: 'Tab 1', content: 'Content of Tab Pane 1', itemKey: '1' },\\n            { title: 'Tab 2', content: 'Content of Tab Pane 2', itemKey: '2' },\\n        ];\\n        this.state = {\\n            panes,\\n            activeKey: panes[0].itemKey,\\n        };\\n    }\\n\\n    add() {\\n        const { panes } = this.state;\\n        const index = this.newTabIndex++;\\n        panes.push({ title: `New Tab ${index}`, content: 'New Tab Pane', itemKey: `newTab${index}` });\\n        this.setState({ panes, activeKey: `newTab${index}` });\\n    }\\n\\n    remove() {\\n        const { panes } = this.state;\\n        if (panes.length > 1) {\\n            panes.pop();\\n            this.setState({ panes, activeKey: panes[panes.length - 1].itemKey });\\n        }\\n    }\\n\\n    handleChange(activeKey) {\\n        this.setState({ activeKey });\\n    }\\n\\n    render() {\\n        const { panes, activeKey } = this.state;\\n        return (\\n            <Tabs\\n                defaultActiveKey=\\\"1\\\"\\n                activeKey={activeKey}\\n                onChange={this.handleChange.bind(this)}\\n                tabBarExtraContent={\\n                    <ButtonGroup>\\n                        <Button onClick={() => this.add()}>Add</Button>\\n                        <Button onClick={() => this.remove()}>Delete</Button>\\n                    </ButtonGroup>\\n                }\\n            >\\n                {panes.map(pane => (\\n                    <TabPane tab={pane.title} itemKey={pane.itemKey} key={pane.itemKey}>\\n                        {pane.content}\\n                    </TabPane>\\n                ))}\\n            </Tabs>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Closeable\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Close a tab in the tab bar.\\nOnly card style tabs support the close option. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closable={true}\"), \" to turn it on.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tabs, TabPane } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    constructor(props){\\n        super(props);\\n        this.state = {\\n            tabList: [\\n                {tab: 'Doc', itemKey:'1', text:'Doc', closable:true},\\n                {tab: 'Quick Start', itemKey:'2', text:'Quick Start', closable:true},\\n                {tab: 'Help', itemKey:'3', text:'Help'},\\n            ]\\n        }\\n    }\\n    close(key){\\n        const newTabList = [...this.state.tabList];\\n        const closeIndex = newTabList.findIndex(t=>t.itemKey===key);\\n        newTabList.splice(closeIndex, 1);\\n        this.setState({tabList:newTabList});\\n    }\\n    render() {\\n        return (\\n            <Tabs type=\\\"card\\\" defaultActiveKey=\\\"1\\\" onTabClose={this.close.bind(this)}>\\n                {\\n                    this.state.tabList.map(t=><TabPane closable={t.closable} tab={t.tab} itemKey={t.itemKey} key={t.itemKey}>{t.text}</TabPane>)\\n                }\\n            </Tabs>\\n        );\\n    }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Tab\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default Value\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"activeKey\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The itemKey value of the currently active tab page\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"collapsible\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"collapsed Tabs, \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.1.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"contentStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The outer style object of the content area\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultActiveKey\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Initialize the key value of the selected tab page\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'1'\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"keepDOM\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to render the DOM structure of the hidden panel when using TabPane writing, \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"lazyRender\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Lazy rendering, only when the panel is activated will it be rendered in the DOM tree, \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"renderTabBar\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used for secondary packaging tab bar\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(tabBarProps: object, defaultTabBar: React.ComponentType) => ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size, providing three types of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"medium\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\"), \", \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.11.0, currently only supports linear Tabs\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tabBarExtraContent\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Used to extend the content of the tab bar\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tabList\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"An array of tab page objects that supports itemKey (corresponding to activeKey, tab (tab page text) and icon (tab page icon)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"TabPane[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tabPaneMotion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to use animation to switch tabs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tabPosition\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The position of the tab, support \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \" (horizontal), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"left\"), \" (vertical), \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The style of the label bar, optional \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"line\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"card\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"button\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"line\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when switching tab pages\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(activeKey: string)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onTabClick\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Click event\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(key: string, e: Event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onTabClose\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"executed when tab closed by user, \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=2.1.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(tabKey: string)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")))), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"TabPane\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default Value\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether the tab bar is disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tab bar icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"itemKey\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"corresponding to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"activeKey\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tab\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tab page bar display text\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"None\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"closable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"whether user can close the tab \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=2.1.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Accessibility\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"ARIA\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"About role\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TabBar has a role of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tablist\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tab in TabBar has a role of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tab\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TabPane has a role of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tabpanel\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"aria-orientation: Indicates TabBar's orientation, can be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertical\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"horizontal\"), \". When tabPosition is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \", aria-orientation will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertical\"), \", when tabPosition is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \", aria-orientation will be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"horizontal\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"aria-disabled: When TabPane is disabled, the related Tab's aria-disabled will be set to true.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"aria-selected: Indicates whether the Tab is selected.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"aria-controls: Indicates the TabPane controlled by the Tab\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"aria-labelledby: Indicates the element labels the TabPane\")))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Token\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/navigation/tabs","next":{"fields":{"slug":"zh-CN/navigation/tabs"},"id":"a73c1b46-e43e-5ef5-80fb-b2880b58d0bc","frontmatter":{"title":"Tabs 标签栏","localeCode":"zh-CN","icon":"doc-tabs"}},"previous":{"fields":{"slug":"zh-CN/navigation/steps"},"id":"8d8b081d-16b2-5432-bc9f-92d47ad0900a","frontmatter":{"title":"Steps 步骤","localeCode":"zh-CN","icon":"doc-steps"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}