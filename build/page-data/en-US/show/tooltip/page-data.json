{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/show/tooltip","result":{"data":{"current":{"frontmatter":{"title":"Tooltip","order":60,"brief":"Tooltip is used to identify an element or attach a small amount of auxiliary information. The most typical scenario is to explain the meaning of the icon to the user, display the truncated text, display the description of the picture, and so on.","icon":"doc-tooltip"},"fields":{"type":"show"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#cautions","title":"Cautions"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#trigger-timing","title":"Trigger Timing"},{"url":"#override-style","title":"Override Style"},{"url":"#position","title":"Position"},{"url":"#render-to-specified-dom","title":"Render to Specified DOM"},{"url":"#arrow-point-at-center","title":"Arrow Point at Center"},{"url":"#use-with-popver-or-popconfirm","title":"Use with Popver or Popconfirm"}]},{"url":"#api-reference","title":"API Reference"},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria","title":"ARIA"}]},{"url":"#design-tokens","title":"Design Tokens"},{"url":"#faq","title":"FAQ"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 60,\n  \"category\": \"Show\",\n  \"title\": \"Tooltip\",\n  \"subTitle\": \"Tooltip\",\n  \"icon\": \"doc-tooltip\",\n  \"width\": \"65%\",\n  \"brief\": \"Tooltip is used to identify an element or attach a small amount of auxiliary information. The most typical scenario is to explain the meaning of the icon to the user, display the truncated text, display the description of the picture, and so on.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { Tooltip } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Cautions\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In order to calculate the positioning, ToolTip needs to obtain the real DOM elements of the children, so the ToolTip type currently supports the following two types of children\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The Jsx type of the real dom node, such as span, div, p...\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the FunctionComponent wrapped by forwardRef to pass props and ref to the real dom node\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React, { forwardRef } from 'react';\\nimport { Tooltip } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const Test = forwardRef((props, ref) => (\\n        <span {...props} ref={ref}>\\n            Test\\n        </span>\\n    ));\\n    return (\\n        <Tooltip content={'hi bytedance'}>\\n            <Test />\\n        </Tooltip>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use Tooltip to wrap any support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onMouseEnter\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onMouseLeave\"), \" The components.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Of course, the components of the package may be bound to their own. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onMouseEnter\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onMouseLeave\"), \" Wait for the event, in which case you need to choose the right Trigger time for Tooltip.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For example:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The component has been bound to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onClick\"), \" event, so Tooltip's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trigger\"), \"parameter value is best passed to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hover\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The component has been bound to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onMouseEnter\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onMouseLeave\"), \" event, and the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trigger\"), \" parameter value of Tooltip is best transmitted to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"click\"), \".\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    return (\\n        <Tooltip content={'hi bytedance'}>\\n            <Tag>Hover here</Tag>\\n        </Tooltip>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Trigger Timing\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configure the timing of the trigger display, the default is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hover\"), \", optional \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hover\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"focus\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"click\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"custom\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"custom\"), \", it needs to be used in conjunction with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"visible\"), \"attribute, at which point the display is completely controlled\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React, { useState } from 'react';\\nimport { Tooltip, Button, ButtonGroup, Input } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const [visible, setVisible] = useState(false);\\n    // Container needs to set position: relative\\n    const getPopupContainer = () => document.querySelector('#tooltip-container');\\n\\n    return (\\n        <div style={{ width: '100%', height: '100%', overflow: 'hidden', position: 'relative' }} id=\\\"tooltip-container\\\">\\n            <div style={{ width: '150%', height: '150%', paddingLeft: 50, paddingTop: 50 }}>\\n                <Tooltip content={'hi bytedance'} getPopupContainer={getPopupContainer}>\\n                    <Button style={{ marginBottom: 20 }}>Hover to show</Button>\\n                </Tooltip>\\n                <br />\\n                <Tooltip content={'hi bytedance'} trigger=\\\"click\\\" getPopupContainer={getPopupContainer}>\\n                    <Button style={{ marginBottom: 20 }}>Click to show</Button>\\n                </Tooltip>\\n                <br />\\n                <Tooltip content={'hi bytedance'} trigger=\\\"focus\\\" getPopupContainer={getPopupContainer}>\\n                    <Input style={{ width: 150, marginBottom: 20 }} placeholder=\\\"Focus to show\\\" />\\n                </Tooltip>\\n                <br />\\n                <Tooltip\\n                    content={'hi bytedance'}\\n                    trigger=\\\"custom\\\"\\n                    visible={visible}\\n                    getPopupContainer={getPopupContainer}\\n                >\\n                    <span style={{ display: 'inline-block' }}>\\n                        <ButtonGroup>\\n                            <Button onClick={() => setVisible(true)}>Controlled show</Button>\\n                            <Button onClick={() => setVisible(false)}>Controlled hide</Button>\\n                        </ButtonGroup>\\n                    </span>\\n                </Tooltip>\\n            </div>\\n        </div>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Override Style\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Configure specific styles for the pop-up layer through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" API, such as overriding the default maxWidth (280px)\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\\n\\n() => {\\n    return (\\n        <Tooltip\\n            style={{\\n                maxWidth: 320,\\n            }}\\n            className=\\\"another-classname\\\"\\n            content={'hi semi semi semi semi semi semi semi'}\\n        >\\n            <Tag style={{ marginRight: '8px' }}>Custom Style And ClassName</Tag>\\n        </Tooltip>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Position\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Support pop-up layers are displayed in different directions in 12 directions\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const tops = [\\n        ['topLeft', 'TL'],\\n        ['top', 'Top'],\\n        ['topRight', 'TR'],\\n    ];\\n    const lefts = [\\n        ['leftTop', 'LT'],\\n        ['left', 'Left'],\\n        ['leftBottom', 'LB'],\\n    ];\\n    const rights = [\\n        ['rightTop', 'RT'],\\n        ['right', 'Right'],\\n        ['rightBottom', 'RB'],\\n    ];\\n    const bottoms = [\\n        ['bottomLeft', 'BL'],\\n        ['bottom', 'Bottom'],\\n        ['bottomRight', 'BR'],\\n    ];\\n\\n    return (\\n        <div style={{ paddingLeft: 40 }}>\\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\\n                {tops.map((pos, index) => (\\n                    <Tooltip\\n                        content={\\n                            <article>\\n                                <p>hi bytedance</p>\\n                                <p>hi bytedance</p>\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginRight: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n            <div style={{ width: 40, float: 'left' }}>\\n                {lefts.map((pos, index) => (\\n                    <Tooltip\\n                        content={\\n                            <article>\\n                                <p>hi bytedance</p>\\n                                <p>hi bytedance</p>\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginBottom: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n            <div style={{ width: 40, marginLeft: 180 }}>\\n                {rights.map((pos, index) => (\\n                    <Tooltip\\n                        content={\\n                            <article>\\n                                <p>hi bytedance</p>\\n                                <p>hi bytedance</p>\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginBottom: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\\n                {bottoms.map((pos, index) => (\\n                    <Tooltip\\n                        content={\\n                            <article>\\n                                <p>hi bytedance</p>\\n                                <p>hi bytedance</p>\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginRight: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n        </div>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Render to Specified DOM\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getPopupContainer\"), \" the bullet layer will be rendered to the DOM returned by the function.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"It should be noted that:\"), \" The returned container, if not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.body\"), \",\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"position\"), \" Will be set by default \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"\\\"relative\\\"\")), \"(Version > = 0.18.0).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    return (\\n        <div id=\\\"tooltip-wrapper\\\" style={{ position: 'relative' }}>\\n            <Tooltip\\n                position=\\\"right\\\"\\n                content=\\\"Popup will be rendered in element#tooltip-wrapper\\\"\\n                trigger=\\\"click\\\"\\n                getPopupContainer={() => document.querySelector('#tooltip-wrapper')}\\n            >\\n                <Tag>Click here</Tag>\\n            </Tooltip>\\n        </div>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Arrow Point at Center\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version:\"), \" >= 0.34.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Under the condition of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"showArrow=true\"), \", you can pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrowPointAtCenter=true\"), \" so that the small triangle always points to the center of the element.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Tooltip, Tag } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const tops = [\\n        ['topLeft', 'TL'],\\n        ['top', 'Top'],\\n        ['topRight', 'TR'],\\n    ];\\n    const lefts = [\\n        ['leftTop', 'LT'],\\n        ['left', 'Left'],\\n        ['leftBottom', 'LB'],\\n    ];\\n    const rights = [\\n        ['rightTop', 'RT'],\\n        ['right', 'Right'],\\n        ['rightBottom', 'RB'],\\n    ];\\n    const bottoms = [\\n        ['bottomLeft', 'BL'],\\n        ['bottom', 'Bottom'],\\n        ['bottomRight', 'BR'],\\n    ];\\n\\n    return (\\n        <div style={{ paddingLeft: 40 }}>\\n            <div style={{ marginLeft: 40, whiteSpace: 'nowrap' }}>\\n                {tops.map((pos, index) => (\\n                    <Tooltip\\n                        showArrow\\n                        arrowPointAtCenter\\n                        content={\\n                            <article>\\n                                Hi ByteDancer, this is a tooltip.\\n                                <br /> We have 2 lines.\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginRight: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n            <div style={{ width: 40, float: 'left' }}>\\n                {lefts.map((pos, index) => (\\n                    <Tooltip\\n                        showArrow\\n                        arrowPointAtCenter\\n                        content={\\n                            <article>\\n                                Hi ByteDancer, this is a tooltip.\\n                                <br /> We have 2 lines.\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginBottom: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n            <div style={{ width: 40, marginLeft: 180 }}>\\n                {rights.map((pos, index) => (\\n                    <Tooltip\\n                        showArrow\\n                        arrowPointAtCenter\\n                        content={\\n                            <article>\\n                                Hi ByteDancer, this is a tooltip.\\n                                <br /> We have 2 lines.\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginBottom: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n            <div style={{ marginLeft: 40, clear: 'both', whiteSpace: 'nowrap' }}>\\n                {bottoms.map((pos, index) => (\\n                    <Tooltip\\n                        showArrow\\n                        arrowPointAtCenter\\n                        content={\\n                            <article>\\n                                Hi ByteDancer, this is a tooltip.\\n                                <br /> We have 2 lines.\\n                            </article>\\n                        }\\n                        position={Array.isArray(pos) ? pos[0] : pos}\\n                        key={index}\\n                    >\\n                        <Tag style={{ marginRight: '8px' }}>{Array.isArray(pos) ? pos[1] : pos}</Tag>\\n                    </Tooltip>\\n                ))}\\n            </div>\\n        </div>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Use with Popver or Popconfirm\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Tooltip, Popconfirm, and Popover all need to hijack related events of children (onMouseEnter / onMouseLeave / onClick ....) to configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trigger\"), \". If used directly, it will invalidate the outer trigger.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Need to add a layer of elements (div or span) in the middle to prevent trigger event hijack failure.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Popconfirm, Tooltip, Button } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <Popconfirm content=\\\"Confirm Delete\\\">\\n        <span style={{ display: 'inline-block' }}>\\n            <Tooltip content={'Delete Comment'}>\\n                <Button type=\\\"danger\\\">Delete</Button>\\n            </Tooltip>\\n        </span>\\n    </Popconfirm>\\n);\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"hr\", {\n    parentName: \"section\"\n  }), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"autoAdjustOverflow\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether the floating layer automatically adjusts its direction when it is blocked\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"arrowPointAtCenter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether the \\\"small triangle\\\" points to the center of the element, you need to pass in \\\"showArrow = true\\\" at the same time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.34.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up layer classname\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up layer content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"clickToHide\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to automatically close the elastic layer when clicking on the floating layer and any element inside\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.24.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getPopupContainer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Specifies the parent DOM, and the bullet layer will be rendered to the DOM\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => HTMLElement\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => document.body\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mouseEnterDelay\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"After the mouse is moved in, the display delay time, in milliseconds (only effective when the trigger is hover/focus)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"50\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mouseLeaveDelay\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The time for the delay to disappear after the mouse is moved out, in milliseconds (only effective when the trigger is hover/focus), and is not less than mouseEnterDelay\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"50\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"motion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to show the pop-up motion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"position\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up layer display position, optional value: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"topLeft\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"topRight\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"left\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"leftTop\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"leftBottom\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"right\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rightTop\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rightBottom\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottomLeft\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottomRight\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'top'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"prefixCls\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"className\"), \" prefix of the pop-up layer wrapper div. When this item is set, the pop-up layer will no longer have the style of Tooltip.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'semi-tooltip '\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"rePosKey\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"This value can be updated to manually trigger the repositioning of the pop-up layer.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up layer inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"spacing\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The distance between the pop-up layer and the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\"), \" element\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showArrow\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Does it show an arrow triangle?\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"stopPropagation\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to prevent click events on the bomb layer from bubbling\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.34.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"transformFromCenter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to transform from the horizontal or vertical center of the element of the package, this parameter affects only the `tansform-origin 'of the dynamic effect transformation and generally does not need to be changed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"trigger\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Timing of triggering display, optional value: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"hover\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focus\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"click\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"custom\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'hover'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"visible\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to show the pop-up layer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"wrapperClassName\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When children are disabled or children are multiple elements, the outer layer will wrap a layer of span elements, and the api is used to set the style class name of this span\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.32.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zIndex\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bullet levels.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1060\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onVisibleChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A callback triggered when the pop-up layer is displayed/hidden\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(isVisible: boolean) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClickOutSide\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when the pop-up layer is in the display state and the non-Children, non-floating layer inner area is clicked (only valid when trigger is custom, click)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"2.1.0\")))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Accessibility\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"ARIA\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tooltip has a tooltip role, following the definition of Tooltip in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices/#tooltip\"\n  }, \"WAI-ARIA\"), \" specification\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tooltip's content and children\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"about content\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The wrapper of content will be automatically added with id attribute to match the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" of children and associate content with children\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"about children\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There should be an explicit connection between the content of the Tooltip and its children. Tooltip will automatically add the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" attribute to the children element, the value is the id of the content wraper. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the children of your Tooltip are Icon and do not contain visible text, we recommend that you add the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-label\"), \" attribute to the children to describe accordingly \")))))), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Good practices, add aria-label to description tooltip children\\n/* eslint-disable */\\n<Tooltip content={<p id='description'>Edit your setting</p>}>\\n    <IconSetting aria-label='Settings'> \\n    </IconSetting>\\n</Tooltip>\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"FAQ\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Why Tooltip does not set style word-break to all or word?\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Content in difference languages (e.g. English, Chinese, combination of English and Chinese) may require different styles in terms of word-break, so Semi does not use a default setting. You could use corresponding CSS styles to your own needs.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/show/tooltip","next":{"fields":{"slug":"zh-CN/show/tooltip"},"id":"8498a690-ea56-5d1c-9cdf-756e3a210c71","frontmatter":{"title":"Tooltip 工具提示","localeCode":"zh-CN","icon":"doc-tooltip"}},"previous":{"fields":{"slug":"zh-CN/show/timeline"},"id":"c31e9770-6899-5f88-a476-d83adbc22a98","frontmatter":{"title":"Timeline 时间轴","localeCode":"zh-CN","icon":"doc-timeline"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}