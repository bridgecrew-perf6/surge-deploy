{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/show/modal","result":{"data":{"current":{"frontmatter":{"title":"Modal","order":52,"brief":"Modals are used to wait for the user to interact, inform the user of important information, or display more information without losing context.","icon":"doc-modal"},"fields":{"type":"show"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#mask-closable","title":"Mask Closable"},{"url":"#custom-button-text","title":"Custom Button Text"},{"url":"#custom-button-properties","title":"Custom Button Properties"},{"url":"#custom-header--footer","title":"Custom Header & Footer"},{"url":"#custom-style","title":"Custom Style"},{"url":"#custom-modal","title":"Custom Modal"},{"url":"#full-screen-modal","title":"Full Screen Modal"},{"url":"#confirm-modal","title":"Confirm Modal"},{"url":"#usemodal-hooks","title":"useModal Hooks"}]},{"url":"#api-reference","title":"API Reference","items":[{"url":"#modal","title":"Modal"},{"url":"#static-method","title":"Static Method"}]},{"url":"#design-tokens","title":"Design Tokens"},{"url":"#faq","title":"FAQ"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 52,\n  \"category\": \"Show\",\n  \"title\": \"Modal\",\n  \"subTitle\": \"Modal\",\n  \"icon\": \"doc-modal\",\n  \"brief\": \"Modals are used to wait for the user to interact, inform the user of important information, or display more information without losing context.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { Modal } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n        console.log('Ok button clicked');\\n    }\\n    handleAfterClose(){\\n        console.log('After Close callback executed');\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n        console.log('Cancel button clicked');\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Open Modal</Button>\\n                <Modal\\n                    title=\\\"Basic Modal\\\"\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    afterClose={this.handleAfterClose} // >= 1.16.0\\n                    onCancel={this.handleCancel}\\n                >\\n                    This is the content of a basic modal.\\n                    <br/>\\n                    More content...\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Mask Closable\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maskClosable={false}\"), \" to prevent modal from closing when clicking on the mask.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Mask Not Closable</Button>\\n                <Modal\\n                    title=\\\"Modal Title\\\"\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    onCancel={this.handleCancel}\\n                    maskClosable={false}\\n                >\\n                    <p>This is a modal that cannot be closed by clicking on the mask.</p>\\n                    <p>More content...</p>\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Button Text\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can set button text using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"okText\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cancelText\"), \".\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In the case of creating a modal with static methods, you will have to use these two properties to set i18 texts at this moment. Because we cannot modify the React component tree, imperatively inserted components cannot consume Locale-related Context\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Custom Button Text</Button>\\n                <Modal\\n                    title=\\\"Custom Button Text\\\"\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    onCancel={this.handleCancel}\\n                    okText={'Sounds great!'}\\n                    cancelText={'No, thanks.'}\\n                >\\n                    <p>This is a modal with customized button texts.</p>\\n                    <p>More content...</p>\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Button Properties\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can set button properties using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"okButtonProps\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cancelButtonProps\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Custom Button Properties</Button>\\n                <Modal\\n                    title=\\\"Custom Button Properties\\\"\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    onCancel={this.handleCancel}\\n                    okButtonProps={{size: 'small', type: 'warning'}}\\n                    cancelButtonProps={{size: 'small', disabled: true}}\\n                >\\n                    <p>This is a modal with customized button props.</p>\\n                    <p>More content...</p>\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Header & Footer\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For more customized modal, you could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"footer\"), \". Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header={null}\"), \" if you do not want header area, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"footer={null}\"), \" to remove footer area including buttons.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Customized Footer</Button>\\n                <Modal\\n                    title=\\\"Customized Footer\\\"\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    onCancel={this.handleCancel}\\n                    footer={\\n                        <Button type=\\\"primary\\\" onClick={this.handleOk}>\\n                            Yes, I Understand\\n                        </Button>\\n                    }\\n                >\\n                    <p>This is a modal with a customized footer.</p>\\n                    <p>More content...</p>\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Style\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" to customize styling or position e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style.top = '30vh'\"), \", or use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"centered\"), \" to center modal. Also, you could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maskStyle\"), \" to customize mask style or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bodyStyle\"), \" for content style.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Custom Style</Button>\\n                <Modal\\n                    title=\\\"Custom Style\\\"\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    onCancel={this.handleCancel}\\n                    centered\\n                    bodyStyle={{overflow: 'auto', height: 200}}\\n                >\\n                    <p style={{lineHeight: 1.8}}>Semi Design is a design system developed and maintained by IES Front-end Team and UED Team</p>\\n                    <p style={{lineHeight: 1.8}}>Semi Design create a consistent, good-looking, easy-to-use, and efficient user experience with a user-centric, content-first, and human-friendly design system.\\n                    </p>\\n                    <ul>\\n                        <li><p>Content-first</p></li>\\n                        <li><p>Customized theming</p></li>\\n                        <li><p>Internationalized</p></li>\\n                        <li><p>Humanism</p></li>\\n                    </ul>\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Modal\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"footer\"), \", etc, you could create any modal to your needs.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button, List } from '@douyinfe/semi-ui';\\nimport { IconVigoLogo, IconSemiLogo } from '@douyinfe/semi-icons';\\n\\nclass modalDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {visible: false};\\n        this.showDialog = this.showDialog.bind(this);\\n        this.handleOk = this.handleOk.bind(this);\\n        this.handleCancel = this.handleCancel.bind(this);\\n    }\\n    showDialog() {\\n        this.setState({\\n            visible: true\\n        });\\n    }\\n    handleOk(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    handleCancel(e) {\\n        this.setState({\\n            visible: false\\n        });\\n    }\\n    render() {\\n        const data = [\\n            {\\n                icon: <IconSemiLogo style={{fontSize: 48}} />,\\n                title: 'Boost new feature adoption with Integration',\\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team'\\n            },\\n            {\\n                icon: <IconVigoLogo style={{fontSize: 48}} />,\\n                title: 'Introducing Dark Mode',\\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team'\\n            },\\n            {\\n                icon: <IconSemiLogo style={{fontSize: 48}} />,\\n                title: 'New List Component',\\n                content: 'Sample data is prepared for you to demostrate how Integration may be useful for your team'\\n            },\\n        ];\\n        const btnStyle = {\\n            width: 240,\\n            margin: '4px 50px',\\n        };\\n        const footer = (\\n            <div style={{textAlign: 'center'}}>\\n                <Button type=\\\"primary\\\" theme=\\\"solid\\\" onClick={this.handleOk} style={btnStyle}>\\n                    Continue\\n                </Button>\\n                <Button type=\\\"primary\\\" theme=\\\"borderless\\\" onClick={this.handleCancel} style={btnStyle}>\\n                    Learn more features\\n                </Button>\\n            </div>\\n        );\\n        return (\\n            <>\\n                <Button onClick={this.showDialog}>Customized Modal</Button>\\n                <Modal\\n                    header={null}\\n                    visible={this.state.visible}\\n                    onOk={this.handleOk}\\n                    onCancel={this.handleCancel}\\n                    footer={footer}\\n                >\\n                    <h3 style={{textAlign: 'center', fontSize: 24, margin: 40}}>Semi Design New Features</h3>\\n                    <List\\n                        dataSource={data}\\n                        split={false}\\n                        renderItem={item => (\\n                            <List.Item\\n                                header={item.icon}\\n                                main={\\n                                    <div>\\n                                        <h6 style={{margin: 0, fontSize: 16}}>{item.title}</h6>\\n                                        <p style={{marginTop: 4, color: 'var(--semi-color-text-1)'}}>{item.content}</p>\\n                                    </div>\\n                                }\\n                            />)\\n                        }\\n                    />\\n                </Modal>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Full Screen Modal\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullScreen={true}\"), \" can use full screen Modal\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\n\\n() => {\\n    const [visible, setVisible] = useState(false);\\n    const onClose = () => {\\n        setVisible(false);\\n    };\\n    return (\\n        <>\\n            <Button onClick={() => setVisible(true)}>Open Full Screen Modal</Button>\\n            <Modal\\n                title=\\\"Title of Modal\\\"\\n                fullScreen\\n                visible={visible}\\n                onOk={onClose}\\n                onCancel={onClose}\\n            >\\n                <p>This is a full screen modal</p>\\n                <p>More content...</p>\\n            </Modal>\\n        </>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Confirm Modal\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could use static methods to create a confirm Modal. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" to customize icon.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Modal, Button } from '@douyinfe/semi-ui';\\nimport { IconSend } from '@douyinfe/semi-icons';\\n\\nModalComponent = function(props) {\\n    function success() {\\n        Modal.success({ 'title': 'This is a success message', 'content': 'bla bla bla...'});\\n    }\\n\\n    function info() {\\n        Modal.info({ 'title': 'Here is some info', 'content': 'bla bla bla...' });\\n    }\\n\\n    function error() {\\n        Modal.error({ 'title': 'Unfortunately, there is an error', 'content': 'bla bla bla...' });\\n    }\\n\\n    function warning() {\\n        Modal.warning({ 'title': 'Warning: be cautious ahead', 'content': 'bla bla bla...' });\\n    }\\n\\n    function confirm() {\\n        Modal.confirm({ 'title': 'Are you sure ?', 'content': 'bla bla bla...' });\\n    }\\n\\n    function custom() {\\n        Modal.info({ 'title': 'This is a custom modal', 'content': 'bla bla bla...', icon: <IconSend />, cancelButtonProps: { theme: 'borderless' }, okButtonProps: { theme: 'solid' }, });\\n    }\\n\\n    return (\\n        <div>\\n            <Button onClick={info}>Info</Button>\\n            <br/>\\n            <br/>\\n            <Button onClick={success}>Success</Button>\\n            <br/>\\n            <br/>\\n            <Button onClick={error} type=\\\"danger\\\">Error</Button>\\n            <br/>\\n            <br/>\\n            <Button onClick={warning} type=\\\"warning\\\">Warning</Button>\\n            <br/>\\n            <br/>\\n            <Button onClick={confirm} type=\\\"primary\\\">Confirm</Button>\\n            <br/>\\n            <br/>\\n            <Button onClick={custom}>Custom</Button>\\n        </div>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"useModal Hooks\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal.useModal\"), \" to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contextHolder\"), \" that could access context.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true hideInDSM\",\n    \"live\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { ConfigProvider, Modal, Button } from '@douyinfe/semi-ui';\\nimport en_GB from '@douyinfe/semi-ui/lib/es/locale/source/en_GB';\\n\\nfunction Demo(props = {}) {\\n    const [modal, contextHolder] = Modal.useModal();\\n    const config = { 'title': 'This is a success message', 'content': 'Context consumer' };\\n\\n    return (\\n        <ConfigProvider locale={en_GB}>\\n            <div>\\n                <Button\\n                    onClick={() => {\\n                        modal.confirm(config);\\n                    }}\\n                >\\n                    Confirm Modal\\n                </Button>\\n            </div>\\n            {contextHolder}\\n        </ConfigProvider>\\n    );\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Modal\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"afterClose\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when modal closed completely   \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.16.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bodyStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cancelButtonProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties for cancel button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/en-US/input/button#API-reference\"\n  }, \"ButtonProps\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cancelText\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text for cancel button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"centered\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to center modal\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"closable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to show close button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"closeIcon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Icon for close button  \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"<IconClose /\", \">\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"closeOnEsc\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to allow close modal by keyboard event Esc  \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"confirmLoading\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle loading state of confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"footer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Footer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"fullScreen\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Is modal FullScreen\\uFF08will override width and height\\uFF09 \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.18.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getPopupContainer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Specifies the parent DOM, and the bullet layer will be rendered to the DOM, you need to set 'position: relative` \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \" >= v0.33.0 \")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => HTMLElement\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => document.body\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"hasCancel\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to show cancal button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"header\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Header\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"height\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Height\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom icon       \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v1.1.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"keepDOM\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Keep dom tree when close modal \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"lazyRender\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Lazy render modal, used with \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"keepDOM\"), \" \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=v1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to show mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maskClosable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to allow closing when clicking mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maskStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Mask style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"motion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"animation switch\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"object \", \"|\", \" boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"okButtonProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties for confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/en-US/input/button#API-reference\"\n  }, \"ButtonProps\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"okText\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text for confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"okType\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type for confirm button, optional: 'primary'\\u3001'secondary'\\u3001'tertiary'\\u3001'warning'\\u3001'danger'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"primary\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size of modal, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\"), \"(448px), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"medium\"), \"(684px), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\"), \"(920px), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"full-width\"), \"(100vw - 64px) \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'small'\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"title\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Title\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"visible\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle visibility of the modal\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"width\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Width\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"448\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zIndex\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Z-index value for mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1000\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onCancel\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when clicking cancel button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: any) => void \", \"|\", \" Promise<any\", \">\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onOk\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when clicking confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: any) => void \", \"|\", \" Promise<any\", \">\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")))), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Static Method\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.info\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.success\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.error\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.warning\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.confirm\"))), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bodyStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cancelButtonProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties for cancel button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ButtonProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cancelText\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text for cancel button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"centered\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to center modal\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"closable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to show close button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"confirmLoading\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle loading state of confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"footer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Footer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"header\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Header\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"height\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Height\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Customized icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to show mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maskClosable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to allow closing when clicking mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maskStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Mask style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"okButtonProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties for confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ButtonProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"okText\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text for confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"okType\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type for confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"primary\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size of modal, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\"), \"(448px), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"medium\"), \"(684px), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\"), \"(920px), \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"full-width\"), \"(100vw - 64px) \", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v >= 0.33.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'small'\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"title\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Title\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"width\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Width\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"520\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zIndex\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Z-index value for mask\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1000\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Creating modal with the above methods will return a reference to the instance. You could use it to update or close the modal.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onCancel\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when clicking cancel button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: any) => void \", \"|\", \" Promise<any\", \">\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onOk\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when clicking confirm button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: any) => void \", \"|\", \" Promise<any\", \">\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")))), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const modal = Modal.info();\\n\\nmodal.update({\\n  title: 'Updated Title',\\n  content: 'Updated Content',\\n});\\n\\nmodal.destroy();\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.destroyAll\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"v>=0.37.0\"), \"  \")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could use Modal.destroyAll() to destroy Modal that created by methods above e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".info()\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.useModal\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"v>=1.2.0\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"When you need access Context, you could use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal.useModal\"), \" to create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"contextHolder\"), \" and insert to corresponding DOM tree. Modal created by hooks will be able to access the context where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"contextHolder\"), \" is inserted. Hook modal shares the same methods with Modal.method.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"FAQ\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Why the button texts in Modal.confirm are not internationalized even when I use LocaleProvider?\\nIn version >= 1.2.0, you could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal.useModal\"), \" to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contextHolder\"), \" that is accessible to config from ConfigProvider or LocaleProvider.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For version before 1.2 or if you don't want to use Hooks, you could also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"okText\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cancelText\"), \" to set i18 texts at this moment.  \")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/show/modal","next":{"fields":{"slug":"zh-CN/show/modal"},"id":"4a6de184-b9f9-597b-a37e-94fd3b93a993","frontmatter":{"title":"Modal 模态对话框","localeCode":"zh-CN","icon":"doc-modal"}},"previous":{"fields":{"slug":"zh-CN/show/list"},"id":"82bc94da-2912-5adf-97a3-5da7eef22150","frontmatter":{"title":"List 列表","localeCode":"zh-CN","icon":"doc-list"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}