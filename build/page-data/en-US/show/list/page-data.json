{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/show/list","result":{"data":{"current":{"frontmatter":{"title":"List","order":51,"brief":"Lists display a set of related contents.","icon":"doc-list"},"fields":{"type":"show"},"tableOfContents":{"items":[{"url":"#when-to-use","title":"When to Use"},{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#template","title":"Template"},{"url":"#layout","title":"Layout"},{"url":"#grid","title":"Grid"},{"url":"#responsive-list","title":"Responsive List"},{"url":"#load-more","title":"Load More"},{"url":"#scroll-to-load","title":"Scroll to Load"},{"url":"#scroll-to-load-infinite-lists","title":"Scroll to Load Infinite Lists"},{"url":"#drag-sort","title":"Drag Sort"},{"url":"#with-pagination","title":"With Pagination"},{"url":"#with-filter","title":"With filter"},{"url":"#add-delete-item","title":"Add delete item"},{"url":"#single-or-multiple-selection","title":"Single or multiple selection"},{"url":"#keyboard-events","title":"Keyboard events"}]},{"url":"#api-reference","title":"API reference","items":[{"url":"#list","title":"List"},{"url":"#listgrid-props","title":"Listgrid props"},{"url":"#listitem","title":"List.Item"}]},{"url":"#design-tokens","title":"Design Tokens"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 51,\n  \"category\": \"Show\",\n  \"title\": \"List\",\n  \"subTitle\": \"List\",\n  \"icon\": \"doc-list\",\n  \"dir\": \"column\",\n  \"brief\": \"Lists display a set of related contents.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"When to Use\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Lists display a set of texts, lists, images, paragraphs, etc. It is commonly used in data display pages.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { List } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" to size list. Supported values include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Small\"), \". Header and Footer customized.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { List } from '@douyinfe/semi-ui';\\n\\nclass SimpleList extends React.Component {\\n    render() {\\n        const data = [\\n            'Do not go gentle into that good night,',\\n            'Old age should burn and rave at close of day;',\\n            'Rage, rage against the dying of the light.',\\n        ];\\n\\n        return (\\n            <div>\\n                <div style={{ marginRight: 16 }}>\\n                    <h3 style={{ marginBottom: 16 }}>Default Size</h3>\\n                    <List\\n                        header={<div>Header</div>}\\n                        footer={<div>Footer</div>}\\n                        bordered\\n                        dataSource={data}\\n                        renderItem={item => <List.Item>{item}</List.Item>}\\n                    />\\n                </div>\\n                <br />\\n                <div style={{ marginRight: 16 }}>\\n                    <h3 style={{ margin: '16px 0' }}>Small Size</h3>\\n                    <List\\n                        size=\\\"small\\\"\\n                        header={<div>Header</div>}\\n                        footer={<div>Footer</div>}\\n                        bordered\\n                        dataSource={data}\\n                        renderItem={item => <List.Item>{item}</List.Item>}\\n                    />\\n                </div>\\n                <br />\\n                <div style={{ marginRight: 16 }}>\\n                    <h3 style={{ margin: '16px 0' }}>Large Size</h3>\\n                    <List\\n                        size=\\\"large\\\"\\n                        header={<div>Header</div>}\\n                        footer={<div>Footer</div>}\\n                        bordered\\n                        dataSource={data}\\n                        renderItem={item => <List.Item>{item}</List.Item>}\\n                    />\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(SimpleList);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Template\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"List.Item has a built-in template consisting of: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extra\"), \". The alignment of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main\"), \" set by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align\"), \" properties using one of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-start\"), \"(default), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-end\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"center\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baseline\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stretch\"), \" .\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { List, ButtonGroup, Button, Avatar } from '@douyinfe/semi-ui';\\n\\nclass ContentList extends React.Component {\\n    render() {\\n        const data = [\\n            // eslint-disable-next-line react/jsx-key\\n            <p\\n                style={{\\n                    color: 'var(--semi-color-text-2)',\\n                    margin: '4px 0',\\n                    width: 420,\\n                    whiteSpace: 'nowrap',\\n                    overflow: 'hidden',\\n                    textOverflow: 'ellipsis',\\n                }}\\n            >\\n                {`Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage, and then is\\n                heard no more; it is a tale told by an idiot, full of sound and fury, signifying nothing.`}\\n            </p>,\\n            // eslint-disable-next-line react/jsx-key\\n            <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0', width: 500 }}>\\n                Come what come may, time and the hour run through the roughest day.\\n            </p>,\\n            // eslint-disable-next-line react/jsx-key\\n            <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0', width: 500 }}>\\n                {`Where shall we three meet again in thunder, lightning, or in rain? When the hurlyburly's done, when the\\n                battle's lost and won`}\\n            </p>,\\n        ];\\n\\n        return (\\n            <div style={{ padding: 12, border: '1px solid var(--semi-color-border)', margin: 12 }}>\\n                <List\\n                    dataSource={data}\\n                    renderItem={item => (\\n                        <List.Item\\n                            header={<Avatar color=\\\"blue\\\">SE</Avatar>}\\n                            main={\\n                                <div>\\n                                    <span style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>Example</span>\\n                                    {item}\\n                                </div>\\n                            }\\n                            extra={\\n                                <ButtonGroup theme=\\\"borderless\\\">\\n                                    <Button>Edit</Button>\\n                                    <Button>More</Button>\\n                                </ButtonGroup>\\n                            }\\n                        />\\n                    )}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(ContentList);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Layout\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layout\"), \" property to set list layout, one of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vertical\"), \"(default) or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"horizontal\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { List, Avatar } from '@douyinfe/semi-ui';\\n\\nclass LayoutList extends React.Component {\\n    render() {\\n        const data = [\\n            {\\n                title: 'Title 1',\\n                color: 'light-blue',\\n            },\\n            {\\n                title: 'Title 2',\\n                color: 'grey',\\n            },\\n            {\\n                title: 'Title 3',\\n                color: 'light-green',\\n            },\\n        ];\\n\\n        return (\\n            <div style={{ padding: 12, border: '1px solid var(--semi-color-border)', margin: 12 }}>\\n                <List\\n                    dataSource={data}\\n                    layout=\\\"horizontal\\\"\\n                    renderItem={item => (\\n                        <List.Item\\n                            header={<Avatar color={item.color}>SE</Avatar>}\\n                            main={\\n                                <div>\\n                                    <span style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>{item.title}</span>\\n                                    <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0' }}>\\n                                        {` Life's but a walking shadow, a poor player, that struts and frets his hour upon\\n                                        the stage, and then is heard no more; it is a tale told by an idiot, full of\\n                                        sound and fury, signifying nothing.`}\\n                                    </p>\\n                                </div>\\n                            }\\n                        />\\n                    )}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(LayoutList);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Grid\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid\"), \" property to set grid layout. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"span\"), \" to set the number of occupying spaces for each item and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gutter\"), \" for spacing between items.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { List, Descriptions, Rating, ButtonGroup, Button } from '@douyinfe/semi-ui';\\n\\nclass LayoutList extends React.Component {\\n    render() {\\n        const data = [\\n            {\\n                title: 'Platform A',\\n                rating: 4.5,\\n                feedbacks: 124,\\n            },\\n            {\\n                title: 'Platform B',\\n                rating: 4,\\n                feedbacks: 108,\\n            },\\n            {\\n                title: 'Platform C',\\n                rating: 4.5,\\n                feedbacks: 244,\\n            },\\n            {\\n                title: 'Platform D',\\n                feedbacks: 189,\\n            },\\n        ];\\n\\n        const style = {\\n            border: '1px solid var(--semi-color-border)',\\n            backgroundColor: 'var(--semi-color-bg-2)',\\n            borderRadius: '3px',\\n            paddingLeft: '20px',\\n        };\\n\\n        return (\\n            <div>\\n                <List\\n                    grid={{\\n                        gutter: 12,\\n                        span: 6,\\n                    }}\\n                    dataSource={data}\\n                    renderItem={item => (\\n                        <List.Item style={style}>\\n                            <div>\\n                                <h3 style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>{item.title}</h3>\\n                                <Descriptions\\n                                    align=\\\"center\\\"\\n                                    size=\\\"small\\\"\\n                                    row\\n                                    data={[\\n                                        { key: 'Rating', value: <Rating allowHalf size=\\\"small\\\" value={item.rating} /> },\\n                                        { key: 'Feedbacks', value: item.feedbacks },\\n                                    ]}\\n                                />\\n                                <div style={{ margin: '12px 0', display: 'flex', justifyContent: 'flex-end' }}>\\n                                    <ButtonGroup theme=\\\"borderless\\\" style={{ marginTop: 8 }}>\\n                                        <Button>Edit</Button>\\n                                        <Button>More</Button>\\n                                    </ButtonGroup>\\n                                </div>\\n                            </div>\\n                        </List.Item>\\n                    )}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(LayoutList);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Responsive List\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/en-US/basic/grid\"\n  }, \"Grid\"), \" for responsive dimensions.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { List, Descriptions, Rating, ButtonGroup, Button } from '@douyinfe/semi-ui';\\n\\nclass Responsive extends React.Component {\\n    render() {\\n        const data = [\\n            {\\n                title: 'Platform A',\\n                rating: 4.5,\\n                feedbacks: 124,\\n            },\\n            {\\n                title: 'Platform B',\\n                rating: 4,\\n                feedbacks: 108,\\n            },\\n            {\\n                title: 'Platform C',\\n                rating: 3.5,\\n                feedbacks: 244,\\n            },\\n            {\\n                title: 'Platform D',\\n                feedbacks: 189,\\n            },\\n            {\\n                title: 'Platform E',\\n                rating: 3,\\n                feedbacks: 128,\\n            },\\n            {\\n                title: 'Platform D',\\n                rating: 4,\\n                feedbacks: 156,\\n            },\\n        ];\\n\\n        const style = {\\n            border: '1px solid var(--semi-color-border)',\\n            backgroundColor: 'var(--semi-color-bg-2)',\\n            borderRadius: '3px',\\n            paddingLeft: '20px',\\n            margin: '8px 2px',\\n        };\\n\\n        return (\\n            <div>\\n                <List\\n                    grid={{\\n                        gutter: 12,\\n                        Xs: 0,\\n                        sm: 0,\\n                        md: 12,\\n                        lg: 8,\\n                        Xl: 8,\\n                        xxl: 6,\\n                    }}\\n                    dataSource={data}\\n                    renderItem={item => (\\n                        <List.Item style={style}>\\n                            <div>\\n                                <h3 style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>{item.title}</h3>\\n                                <Descriptions\\n                                    align=\\\"center\\\"\\n                                    size=\\\"small\\\"\\n                                    row\\n                                    data={[\\n                                        { key: 'Rating', value: <Rating allowHalf size=\\\"small\\\" value={item.rating} /> },\\n                                        { key: 'Feedbacks', value: item.feedbacks },\\n                                    ]}\\n                                />\\n                                <div style={{ margin: '12px 0', display: 'flex', justifyContent: 'flex-end' }}>\\n                                    <ButtonGroup theme=\\\"borderless\\\" style={{ marginTop: 8 }}>\\n                                        <Button>Edit</Button>\\n                                        <Button>More</Button>\\n                                    </ButtonGroup>\\n                                </div>\\n                            </div>\\n                        </List.Item>\\n                    )}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(Responsive);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Load More\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loadMore\"), \" to achieve loading state for more incoming contents.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { List, Skeleton, Button, Avatar } from '@douyinfe/semi-ui';\\n\\nclass LoadMoreList extends React.Component {\\n    constructor() {\\n        super();\\n\\n        const count = 3;\\n        const data = [];\\n        for (let i = 0; i < 40; i++) {\\n            data.push({\\n                color: 'grey',\\n                title: `Semi Design Title ${i}`,\\n                loading: false,\\n            });\\n        }\\n        this.data = data;\\n        this.count = 0;\\n\\n        this.fetchData = () => {\\n            let placeholders = [0, 1, 2].map(key => ({ loading: true }));\\n            this.setState({\\n                loading: true,\\n                list: [...this.state.dataSource, ...placeholders],\\n            });\\n            return new Promise((res, rej) => {\\n                setTimeout(() => {\\n                    let dataSource = this.data.slice(this.count * count, this.count * count + count);\\n                    res(dataSource);\\n                }, 1000);\\n            }).then(dataSource => {\\n                let newData = [...this.state.dataSource, ...dataSource];\\n                this.setState({\\n                    loading: false,\\n                    dataSource: newData,\\n                    list: newData,\\n                    noMore: !dataSource.length,\\n                });\\n            });\\n        };\\n\\n        this.state = {\\n            loading: false,\\n            dataSource: [],\\n            list: [],\\n            noMore: false,\\n        };\\n    }\\n\\n    componentDidMount() {\\n        this.fetchData();\\n    }\\n\\n    onLoadMore() {\\n        this.count++;\\n        this.fetchData();\\n    }\\n\\n    render() {\\n        const { loading, list, noMore } = this.state;\\n        const loadMore =\\n            !loading && !noMore ? (\\n                <div\\n                    style={{\\n                        textAlign: 'center',\\n                        marginTop: 12,\\n                        height: 32,\\n                        lineHeight: '32px',\\n                    }}\\n                >\\n                    <Button onClick={() => this.onLoadMore()}>Load More</Button>\\n                </div>\\n            ) : null;\\n\\n        const placeholder = (\\n            <div\\n                style={{\\n                    display: 'flex',\\n                    alignItems: 'flex-start',\\n                    padding: 12,\\n                    borderBottom: '1px solid var(--semi-color-border)',\\n                }}\\n            >\\n                <Skeleton.Avatar style={{ marginRight: 12 }} />\\n                <div>\\n                    <Skeleton.Title style={{ width: 120, marginBottom: 12, marginTop: 12 }} />\\n                    <Skeleton.Paragraph style={{ width: 600 }} rows={2} />\\n                </div>\\n            </div>\\n        );\\n        return (\\n            <List\\n                loading={loading}\\n                loadMore={loadMore}\\n                dataSource={list}\\n                renderItem={item => (\\n                    <Skeleton placeholder={placeholder} loading={item.loading}>\\n                        <List.Item\\n                            header={<Avatar color={item.color}>SE</Avatar>}\\n                            main={\\n                                <div>\\n                                    <span style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>{item.title}</span>\\n                                    <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0' }}>\\n                                        Create a consistent, good-looking, easy-to-use, and efficient user experience\\n                                        with a user-centric, content-first, and human-friendly design system\\n                                    </p>\\n                                </div>\\n                            }\\n                        />\\n                    </Skeleton>\\n                )}\\n            />\\n        );\\n    }\\n}\\n\\nrender(LoadMoreList);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Scroll to Load\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can integrate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/CassetteRocks/react-infinite-scroller\"\n  }, \"react-infinite-scroller\"), \" to implement scrolling load list. Recommended interaction could be reveal a loadmore button after three scrolling loads.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { List, Avatar, Spin, Button } from '@douyinfe/semi-ui';\\nimport InfiniteScroll from 'react-infinite-scroller';\\n\\nclass ScrollLoad extends React.Component {\\n    constructor() {\\n        super();\\n\\n        const count = 5;\\n        const dataList = [];\\n        for (let i = 0; i < 100; i++) {\\n            dataList.push({\\n                color: 'grey',\\n                title: `Semi Design Title ${i}`,\\n                loading: false,\\n            });\\n        }\\n        this.data = dataList;\\n        this.count = 0;\\n\\n        this.fetchData = () => {\\n            this.setState({\\n                loading: true,\\n            });\\n            return new Promise((res, rej) => {\\n                setTimeout(() => {\\n                    let dataSource = this.data.slice(this.count * count, this.count * count + count);\\n                    res(dataSource);\\n                }, 1000);\\n            }).then(dataSource => {\\n                let newData = [...this.state.dataSource, ...dataSource];\\n                this.count++;\\n                this.setState({\\n                    loading: false,\\n                    dataSource: newData,\\n                    noMore: !dataSource.length,\\n                });\\n            });\\n        };\\n\\n        this.state = {\\n            loading: false,\\n            dataSource: [],\\n            hasMore: true,\\n        };\\n    }\\n\\n    componentDidMount() {\\n        this.fetchData();\\n    }\\n\\n    render() {\\n        const { loading, dataSource, hasMore } = this.state;\\n        const showLoadMore = this.count % 4 === 0;\\n        const loadMore =\\n            !loading && hasMore && showLoadMore ? (\\n                <div\\n                    style={{\\n                        textAlign: 'center',\\n                        marginTop: 12,\\n                        height: 32,\\n                        lineHeight: '32px',\\n                    }}\\n                >\\n                    <Button onClick={this.fetchData}>show more</Button>\\n                </div>\\n            ) : null;\\n\\n        return (\\n            <div\\n                className\\n                Name=\\\"light-scrollbar\\\"\\n                style={{ height: 420, overflow: 'auto', border: '1px solid var(--semi-color-border)', padding: 10 }}\\n            >\\n                <InfiniteScroll\\n                    initialLoad={false}\\n                    pageStart={0}\\n                    threshold={20}\\n                    loadMore={this.fetchData}\\n                    hasMore={!this.state.loading && this.state.hasMore && !showLoadMore}\\n                    useWindow={false}\\n                >\\n                    <List\\n                        loadMore={loadMore}\\n                        dataSource={dataSource}\\n                        renderItem={item => (\\n                            <List.Item\\n                                header={<Avatar color={item.color}>SE</Avatar>}\\n                                main={\\n                                    <div>\\n                                        <span style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>\\n                                            {item.title}\\n                                        </span>\\n                                        <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0' }}>\\n                                            Create a consistent, good-looking, easy-to-use, and efficient user\\n                                            experience with a user-centric, content-first, and human-friendly design\\n                                            system\\n                                        </p>\\n                                    </div>\\n                                }\\n                            />\\n                        )}\\n                    />\\n                    {this.state.loading && this.state.hasMore && (\\n                        <div style={{ textAlign: 'center' }}>\\n                            <Spin />\\n                        </div>\\n                    )}\\n                </InfiniteScroll>\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(ScrollLoad);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Scroll to Load Infinite Lists\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can integrate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bvaughn/react-virtualized\"\n  }, \"react-virtualized\"), \" to implement infinite scrolling lists with virtualization to improve the performance for large amounts of data.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { List, Avatar } from '@douyinfe/semi-ui';\\nimport { InfiniteLoader, AutoSizer } from 'react-virtualized';\\nimport VList from 'react-virtualized/dist/commonjs/List';\\n\\nclass VirtualizedScroll extends React.Component {\\n    constructor() {\\n        super();\\n\\n        const dataList = [];\\n        for (let i = 0; i < 50; i++) {\\n            dataList.push({\\n                color: 'grey',\\n                title: `Semi Design Title ${i}`,\\n            });\\n        }\\n        this.data = dataList;\\n\\n        this.fetchData = (startIndex, stopIndex) => {\\n            return new Promise((res, rej) => {\\n                setTimeout(() => {\\n                    let dataSource = this.data.slice(startIndex, stopIndex + 1);\\n                    res(dataSource);\\n                }, 1000);\\n            }).then(dataSource => {\\n                let newData = [...this.state.dataSource, ...dataSource];\\n                const { loadedRowsMap, loadingRowCount } = this.state;\\n                const increment = stopIndex - startIndex + 1;\\n                for (let i = startIndex; i <= stopIndex; i++) {\\n                    loadedRowsMap[i] = this.statusLoaded;\\n                }\\n                this.setState({\\n                    dataSource: newData,\\n                    loadedRowsMap,\\n                    loadingRowCount: loadingRowCount - increment,\\n                });\\n            });\\n        };\\n\\n        this.state = {\\n            dataSource: [],\\n            loadedRowsMap: {},\\n            loadingRowCount: 0,\\n        };\\n\\n        this.statusLoading = 0;\\n        this.statusLoaded = 1;\\n        this.loadLimit = this.data.length;\\n        this.renderItem = this.renderItem.bind(this);\\n        this.fetchData = this.fetchData.bind(this);\\n        this.handleInfiniteOnLoad = this.handleInfiniteOnLoad.bind(this);\\n        this.isRowLoaded = this.isRowLoaded.bind(this);\\n    }\\n\\n    handleInfiniteOnLoad({ startIndex, stopIndex }) {\\n        let { dataSource, loadedRowsMap, loadingRowCount } = this.state;\\n        const increment = stopIndex - startIndex + 1;\\n        if (stopIndex >= this.loadLimit || loadingRowCount > 0) {\\n            return;\\n        }\\n        for (let i = startIndex; i <= stopIndex; i++) {\\n            loadedRowsMap[i] = this.statusLoading;\\n        }\\n        this.setState({\\n            loadingRowCount: loadingRowCount + increment,\\n        });\\n        return this.fetchData(startIndex, stopIndex);\\n    }\\n\\n    isRowLoaded({ index }) {\\n        const { loadedRowsMap } = this.state;\\n        return !!loadedRowsMap[index];\\n    }\\n\\n    renderItem({ index, key, style }) {\\n        const { dataSource, loadedRowsMap } = this.state;\\n        const item = dataSource[index];\\n\\n        if (!item) {\\n            return;\\n        }\\n        const content = (\\n            <List.Item\\n                key={key}\\n                style={style}\\n                header={<Avatar color={item.color}>SE</Avatar>}\\n                main={\\n                    <div>\\n                        <span style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>{item.title}</span>\\n                        <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0' }}>\\n                            Create a consistent, good-looking, easy-to-use, and efficient user experience with a\\n                            user-centric, content-first, and human-friendly design system\\n                        </p>\\n                    </div>\\n                }\\n            />\\n        );\\n        return content;\\n    }\\n\\n    render() {\\n        const { dataSource } = this.state;\\n        const height = 500;\\n        return (\\n            <List style={{ border: '1px solid var(--semi-color-border)', padding: 10 }}>\\n                <InfiniteLoader\\n                    isRowLoaded={this.isRowLoaded}\\n                    loadMoreRows={this.handleInfiniteOnLoad}\\n                    rowCount={this.loadLimit}\\n                >\\n                    {({ onRowsRendered, registerChild }) => (\\n                        <AutoSizer disableHeight>\\n                            {({ width }) => (\\n                                <VList\\n                                    ref={registerChild}\\n                                    height={height}\\n                                    onRowsRendered={onRowsRendered}\\n                                    rowCount={this.loadLimit}\\n                                    rowHeight={118}\\n                                    rowRenderer={this.renderItem}\\n                                    width={width}\\n                                />\\n                            )}\\n                        </AutoSizer>\\n                    )}\\n                </InfiniteLoader>\\n            </List>\\n        );\\n    }\\n}\\n\\nrender(VirtualizedScroll);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Drag Sort\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can integrate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/react-dnd/react-dnd\"\n  }, \"react-dnd\"), \" to implement drag and drop sort.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" noInline=true hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"noInline\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { List, Avatar } from '@douyinfe/semi-ui';\\nimport { DndProvider, DragSource, DropTarget } from 'react-dnd';\\nimport HTML5Backend from 'react-dnd-html5-backend';\\nimport ReactDOM from 'react-dom';\\n\\nclass DraggableItem extends React.Component {\\n    render() {\\n        const { component, draggingItem, index, connectDragSource, connectDropTarget } = this.props;\\n        const opacity = draggingItem && draggingItem.index === index ? 0.3 : 1;\\n        const style = {\\n            border: '1px solid var(--semi-color-border)',\\n            marginBottom: 12,\\n            backgroundColor: 'var(--semi-color-bg-2)',\\n            cursor: 'move',\\n        };\\n\\n        return connectDragSource(\\n            connectDropTarget(\\n                <div ref={node => (this.node = node)} style={{ ...style, opacity }}>\\n                    {component}\\n                </div>\\n            )\\n        );\\n    }\\n}\\n\\nconst cardSource = {\\n    beginDrag(props) {\\n        return {\\n            id: props.id,\\n            index: props.index,\\n        };\\n    },\\n};\\n\\nconst cardTarget = {\\n    hover(props, monitor, component) {\\n        const dragIndex = monitor.getItem().index;\\n        const hoverIndex = props.index;\\n\\n        if (dragIndex === hoverIndex) {\\n            return;\\n        }\\n        const hoverBoundingRect = ReactDOM.findDOMNode(component).getBoundingClientRect();\\n        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\\n        const clientOffset = monitor.getClientOffset();\\n        const hoverClientY = clientOffset.y - hoverBoundingRect.top;\\n        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\\n            return;\\n        }\\n\\n        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\\n            return;\\n        }\\n\\n        monitor.getItem().index = hoverIndex;\\n        props.moveItem(dragIndex, hoverIndex);\\n    },\\n};\\n\\nfunction collectDragSource(connect, monitor) {\\n    return {\\n        connectDragSource: connect.dragSource(),\\n        draggingItem: monitor.getItem(),\\n    };\\n}\\n\\nfunction collectDropTarget(connect) {\\n    return {\\n        connectDropTarget: connect.dropTarget(),\\n    };\\n}\\n\\nDraggableItem = DragSource('item', cardSource, collectDragSource)(DraggableItem);\\nDraggableItem = DropTarget('item', cardTarget, collectDropTarget)(DraggableItem);\\n\\nclass DraggableList extends React.Component {\\n    constructor() {\\n        const listItems = [\\n            {\\n                title: 'Semi Design Title 1',\\n                color: 'red',\\n            },\\n            {\\n                title: 'Semi Design Title 2',\\n                color: 'grey',\\n            },\\n            {\\n                title: 'Semi Design Title 3',\\n                color: 'light-green',\\n            },\\n            {\\n                title: 'Semi Design Title 4',\\n                color: 'light-blue',\\n            },\\n            {\\n                title: 'Semi Design Title 5',\\n                color: 'pink',\\n            },\\n        ];\\n        super();\\n        this.state = {\\n            data: listItems,\\n        };\\n        this.moveItem = this.moveItem.bind(this);\\n        this.renderDraggable = this.renderDraggable.bind(this);\\n    }\\n\\n    moveItem(dragIndex, hoverIndex) {\\n        const { data } = this.state;\\n        let temp = data[dragIndex];\\n        data[dragIndex] = data[hoverIndex];\\n        data[hoverIndex] = temp;\\n        this.setState(\\n            {\\n                ...this.state,\\n                data\\n            }\\n        );\\n    }\\n\\n    renderDraggable(item, id) {\\n        const content = (\\n            <List.Item\\n                header={<Avatar color={item.color}>SE</Avatar>}\\n                main={\\n                    <div>\\n                        <span style={{ color: 'var(--semi-color-text-0)', fontWeight: 500 }}>{item.title}</span>\\n                        <p style={{ color: 'var(--semi-color-text-2)', margin: '4px 0' }}>\\n                            Create a consistent, good-looking, easy-to-use, and efficient user experience with a\\n                            user-centric, content-first, and human-friendly design system\\n                        </p>\\n                    </div>\\n                }\\n            />\\n        );\\n        return (\\n            <DraggableItem key={item.title} index={id} id={item.title} component={content} moveItem={this.moveItem} />\\n        );\\n    }\\n\\n    render() {\\n        const { data } = this.state;\\n        return (\\n            <div style={{ padding: 12, border: '1px solid var(--semi-color-border)', margin: 12 }}>\\n                <DndProvider backend={HTML5Backend}>\\n                    <List dataSource={data} renderItem={this.renderDraggable} />\\n                </DndProvider>\\n            </div>\\n        );\\n    }\\n}\\n\\nrender(DraggableList);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/clauderic/react-sortable-hoc\"\n  }, \"react-sortable-hoc\"), \", here is also an example\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"hideInDSM\": true\n  }, \"import React, { useState } from 'react';\\nimport { List } from '@douyinfe/semi-ui';\\nimport { IconHandle } from '@douyinfe/semi-icons';\\nimport { SortableContainer, SortableElement, sortableHandle } from 'react-sortable-hoc';\\n\\n() => {\\n    const data = [\\n        'Siege',\\n        'The ordinary world',\\n        'Three Body',\\n        'Snow in the Snow',\\n        'Saharan story',\\n        'Those things',\\n        'A little monk of Zen',\\n        'Dune',\\n        'The courage to be hated',\\n        'Crime and Punishment',\\n        'Moon and sixpence',\\n        'The silent majority',\\n        'First person singular',\\n    ];\\n\\n    const [list, setList] = useState(data.slice(0, 6));\\n\\n    const renderItem = (props) => {\\n        const { item } = props;\\n        const DragHandle = sortableHandle(() => <IconHandle className={`list-item-drag-handler`} style={{ marginRight: 4 }} />);\\n        return (\\n            <List.Item className='component-list-demo-drag-item list-item'>\\n                <DragHandle />\\n                {item}\\n            </List.Item>\\n        );\\n    };\\n\\n    const arrayMove = (array, from, to) => {\\n        let newArray = array.slice();\\n        newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);\\n        return newArray;\\n    };\\n\\n    const onSortEnd = (callbackProps) => {\\n        let { oldIndex, newIndex } = callbackProps;\\n        let newList = arrayMove(list, oldIndex, newIndex);\\n        setList(newList);\\n    };\\n    \\n    const SortableItem = SortableElement(props => renderItem(props));\\n    const SortableList = SortableContainer(\\n        ({ items }) => {\\n            return (\\n                <div className=\\\"sortable-list-main\\\">\\n                    {items.map((item, index) => (\\n                        <SortableItem key={item} index={index} item={item}></SortableItem>\\n                    ))}\\n                </div>\\n            );\\n        },\\n        { distance: 10 }\\n    );\\n\\n    return (\\n        <div>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap', border: '1px solid var(--semi-color-border)' }}>\\n                <List style={{ width: '100%' }} className='component-list-demo-booklist'>\\n                    <SortableList useDragHandle onSortEnd={onSortEnd} items={list}></SortableList>\\n                </List>\\n            </div>\\n\\n        </div>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"With Pagination\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use Pagination in combination to achieve a paged List\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"hideInDSM\": true\n  }, \"import React, { useState } from 'react';\\nimport { List, Pagination } from '@douyinfe/semi-ui';\\n\\n() => {\\n    const data = [\\n        'Siege',\\n        'The ordinary world',\\n        'Three Body',\\n        'Snow in the Snow',\\n        'Saharan story',\\n        'Those things in the Ming Dynasty',\\n        'A little monk of Zen',\\n        'Dune',\\n        'The courage to be hated',\\n        'Crime and Punishment',\\n        'Moon and sixpence',\\n        'The silent majority',\\n        'First person singular',\\n    ];\\n\\n    const [page, onPageChange] = useState(1);\\n\\n    let pageSize = 4;\\n\\n    const getData = (page) => {\\n        let start = (page - 1) * pageSize;\\n        let end = page * pageSize;\\n        return data.slice(start, end);\\n    };\\n\\n    return (\\n        <div>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap' }}>\\n                <List\\n                    dataSource={getData(page)}\\n                    split={false}\\n                    size='small'\\n                    className='component-list-demo-booklist'\\n                    style={{ border: '1px solid var(--semi-color-border)', flexBasis: '100%', flexShrink: 0 }}\\n                    renderItem={item => <List.Item className='list-item'>{item}</List.Item>}\\n                />\\n                <Pagination size='small' style={{ width: '100%', flexBasis: '100%', justifyContent: 'center' }} pageSize={pageSize} total={data.length} currentPage={page} onChange={cPage => onPageChange(cPage)} />\\n            </div>\\n        </div>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"With filter\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use it by assembling Input to filter the List\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\"  hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"\": true,\n    \"hideInDSM\": true\n  }, \"import React, { useState } from 'react';\\nimport { List, Input } from '@douyinfe/semi-ui';\\nimport { IconSearch } from '@douyinfe/semi-icons';\\n\\n() => {\\n    const data = [\\n        'Siege',\\n        'The ordinary world',\\n        'Three Body',\\n        'Snow in the Snow',\\n        'Saharan story',\\n        'Those things in the Ming Dynasty',\\n        'A little monk of Zen',\\n        'Dune',\\n        'The courage to be hated',\\n        'Crime and Punishment',\\n    ];\\n\\n    const [list, setList] = useState(data);\\n\\n    const onSearch = (string) => {\\n        let newList;\\n        if (string) {\\n            newList = data.filter(item => item.includes(string));\\n        } else {\\n            newList = data;\\n        }\\n        setList(newList);\\n    };\\n\\n    return (\\n        <div>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap', border: '1px solid var(--semi-color-border)' }}>\\n                <List\\n                    className='component-list-demo-booklist'\\n                    dataSource={list}\\n                    split={false}\\n                    header={<Input onCompositionEnd={(v) => onSearch(v.target.value)} onChange={(v) => !v ? onSearch() : null} placeholder='search' prefix={<IconSearch />} />}\\n                    size='small'\\n                    style={{ flexBasis: '100%', flexShrink: 0, borderBottom: '1px solid var(--semi-color-border)' }}\\n                    renderItem={item =>\\n                        <List.Item className='list-item'>{item}</List.Item>\\n                    }\\n                />\\n            </div>\\n        </div>\\n    )\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Add delete item\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"hideInDSM\": true\n  }, \"import React, { useState } from 'react';\\nimport { List, Input, Button } from '@douyinfe/semi-ui';\\nimport { IconMinusCircle, IconPlusCircle } from '@douyinfe/semi-icons';\\n\\n() => {\\n    const data = [\\n        'Siege',\\n        'The ordinary world',\\n        'Three Body',\\n        'Snow in the Snow',\\n        'Saharan story',\\n        'Those things in the Ming Dynasty',\\n        'A little monk of Zen',\\n        'Dune',\\n        'The courage to be hated',\\n        'Crime and Punishment',\\n        'Moon and sixpence',\\n        'The silent majority',\\n        'First person singular',\\n    ];\\n    \\n    const [list, setList] = useState(data.slice(0, 8));\\n\\n    const updateList = (item) => {\\n        let newList;\\n        if (item) {\\n            newList = list.filter(i => item !== i);\\n        } else {\\n            newList = list.concat(data.slice(list.length, list.length + 1))\\n        }\\n        setList(newList);\\n    };\\n\\n    return (\\n        <div>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap', border: '1px solid var(--semi-color-border)' }}>\\n                <List\\n                    className='component-list-demo-booklist'\\n                    dataSource={list}\\n                    split={false}\\n                    size='small'\\n                    style={{ flexBasis: '100%', flexShrink: 0, borderBottom: '1px solid var(--semi-color-border)' }}\\n                    renderItem={item => \\n                        <div style={{ margin: 4 }} className='list-item'>\\n                            <Button type='danger' theme='borderless' icon={<IconMinusCircle />} onClick={() => updateList(item)} style={{ marginRight: 4 }} />\\n                            {item}\\n                        </div>\\n                    }\\n                />\\n                <div style={{ margin: 4, fontSize: 14  }} onClick={() => updateList()}>\\n                    <Button theme='borderless'  icon={<IconPlusCircle />}  style={{ marginRight: 4, color: 'var(--semi-color-info)' }}>\\n                    </Button>\\n                    Add book\\n                </div>\\n            </div>\\n        </div>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Single or multiple selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can enhance the List into a list selector by combining Radio or Checkbox\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"hideInDSM\": true\n  }, \"\\nimport React, { useState } from 'react';\\nimport { List, Input, Button, Checkbox, Radio, RadioGroup, CheckboxGroup } from '@douyinfe/semi-ui';\\n\\n() => {\\n    const data = [\\n        'Siege',\\n        'The ordinary world',\\n        'Three Body',\\n        'Snow in the Snow',\\n        'Saharan story',\\n        'Those things in the Ming Dynasty',\\n        'A little monk of Zen',\\n        'Dune',\\n        'The courage to be hated',\\n        'Crime and Punishment',\\n        'Moon and sixpence',\\n        'The silent majority',\\n        'First person singular',\\n    ];\\n\\n    const [page, onPageChange] = useState(1);\\n    const [checkboxVal, setCV] = useState(data[0]);\\n    const [radioVal, setRV] = useState(data[0]);\\n\\n    let pageSize = 8;\\n\\n    const getData = (page) => {\\n        let start = (page - 1) * pageSize;\\n        let end = page * pageSize;\\n        return data.slice(start, end);\\n    };\\n\\n    return (\\n        <div style={{ display: 'flex' }}>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap' }}>\\n                <CheckboxGroup value={checkboxVal} onChange={(value) => setCV(value)}>\\n                    <List\\n                        dataSource={getData(page)}\\n                        className='component-list-demo-booklist'\\n                        split={false}\\n                        size='small'\\n                        style={{ border: '1px solid var(--semi-color-border)', flexBasis: '100%', flexShrink: 0 }}\\n                        renderItem={item => <List.Item className='list-item'><Checkbox value={item}>{item}</Checkbox></List.Item>}\\n                    />\\n                </CheckboxGroup>\\n            </div>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap' }}>\\n                <RadioGroup value={radioVal} onChange={(e) => setRV(e.target.value)}>\\n                    <List\\n                        className='component-list-demo-booklist'\\n                        dataSource={getData(page)}\\n                        split={false}\\n                        size='small'\\n                        style={{ border: '1px solid var(--semi-color-border)', flexBasis: '100%', flexShrink: 0 }}\\n                        renderItem={item => <List.Item className='list-item'><Radio value={item}>{item}</Radio></List.Item>}\\n                    />\\n                </RadioGroup>\\n            </div>\\n        </div>\\n    );\\n};\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Keyboard events\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can monitor the keyboard events of the corresponding keys by yourself to realize the selection of different items. As in the following example, you can use the up and down arrow keys to select different items\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true dir=\\\"column\\\" hideInDSM\",\n    \"live\": \"true\",\n    \"dir\": \"\\\"column\\\"\",\n    \"hideInDSM\": true\n  }, \"import React, { useState, useRef } from 'react';\\nimport { List, Input, Button } from '@douyinfe/semi-ui';\\n\\n() => {\\n    const data = [\\n        'Siege',\\n        'The ordinary world',\\n        'Three Body',\\n        'Snow in the Snow ',\\n        'Saharan story',\\n        'Those things in the Ming Dynasty',\\n        'A little monk of Zen',\\n        'Dune',\\n        'The courage to be hated',\\n        'Crime and Punishment',\\n        'Moon and sixpence',\\n        'The silent majority',\\n        'First person singular',\\n    ];\\n\\n    const [list, setList] = useState(data.slice(0, 10));\\n    const [hoverIndex, setHi] = useState(-1);\\n    const i = useRef(-1);\\n\\n    let changeIndex = (offset) => {\\n        let currentIndex = i.current;\\n        let index = currentIndex + offset;\\n        if (index < 0) {\\n            index = list.length - 1;\\n        }\\n        if (index >= list.length) {\\n            index = 0;\\n        }\\n        i.current = index;\\n        setHi(index);\\n    };\\n    useEffect(() => {\\n        let keydownHandler = (event) => {\\n            let key = event.keyCode;\\n            switch (key) {\\n                case 38: // KeyCode.UP\\n                    event.preventDefault();\\n                    changeIndex(-1);\\n                    break;\\n                case 40: // KeyCode.DOWN\\n                    event.preventDefault();\\n                    changeIndex(1);\\n                    break;\\n                default:\\n                    break;\\n            }\\n        };\\n        window.addEventListener('keydown', keydownHandler);\\n        return () => {\\n            window.removeEventListener('keydown', keydownHandler);\\n        };\\n    }, []);\\n\\n    return (\\n        <div>\\n            <div style={{ marginRight: 16, width: 280, display: 'flex', flexWrap: 'wrap', border: '1px solid var(--semi-color-border)' }}>\\n                <List\\n                    className='component-list-demo-booklist'\\n                    dataSource={list}\\n                    split={false}\\n                    size='small'\\n                    style={{ flexBasis: '100%', flexShrink: 0, borderBottom: '1px solid var(--semi-color-border)' }}\\n                    renderItem={(item, index) =>\\n                        <List.Item className={index === hoverIndex ? 'component-list-demo-booklist-active-item' : ''}>{item}</List.Item>\\n                    }\\n                />\\n            </div>\\n        </div>\\n    );\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The custom styles involved in the Demo of the above book list example are as follows\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \".component-list-demo-booklist {\\n    .list-item {\\n        &:hover {\\n            background-color: var(--semi-color-fill-0);\\n        }\\n        &:active {\\n            background-color: var(--semi-color-fill-1);\\n        }\\n    }\\n}\\n\\n\\nbody > .component-list-demo-drag-item {\\n    font-size: 14px;\\n}\\n\\n.component-list-demo-booklist-active-item {\\n    background-color: var(--semi-color-fill-0);\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API reference\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"List\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bordered\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to display border\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"dataSource\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"List data source\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"any[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"emptyContent\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Displayed content when empty\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"footer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Footer of list\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"grid\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Grid configuration\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/en-US/basic/grid#API-reference\"\n  }, \"Grid\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"header\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Header of list\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"layout\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Layout, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"vertical\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"vertical\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"vertical\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"loadMore\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Loadmore button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"loading\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to display \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Spin\"), \" when loading\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"renderItem\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When using dataSource, you can customize rendering with renderItem\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(item, ind) => ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"split\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to display split line\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClick\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when click an item \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v>=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onRightClick\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when right click an item \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v>=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")))), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Listgrid props\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"v>=1.7.0\"), \" Other grid properties are also supported. Refer to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/en-US/basic/grid\"\n  }, \"Grid\"), \".\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"span\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Number of grid spaces\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"gutter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Grid spacing\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"xs\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"< 576px\"), \" responsive grid, a number or an object containing other attributes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\", \"|\", \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"sm\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\u2265 576px\"), \" responsive grid, a number or an object containing other properties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\", \"|\", \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"md\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\u2265 768px\"), \" responsive grid, a number or an object containing other properties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\", \"|\", \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"lg\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\u2265 992px\"), \" responsive grid, a number or an object containing other properties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\", \"|\", \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"xl\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\u2265 1200px\"), \" responsive grid, a number or an object containing other properties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\", \"|\", \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"xxl\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\u2265 1600px\"), \" responsive grid, a number or an object containing other properties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\", \"|\", \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")))), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"List.Item\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"align\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Vertical alignment of header and main, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"flex-start\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"flex-end\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"center\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"baseline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"stretch\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"flex-start\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"extra\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Additional content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"header\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"List item header content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"main\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"List item body content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClick\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when click an item \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v>=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onRightClick\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when right click an item \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v>=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/show/list","next":{"fields":{"slug":"zh-CN/show/list"},"id":"82bc94da-2912-5adf-97a3-5da7eef22150","frontmatter":{"title":"List 列表","localeCode":"zh-CN","icon":"doc-list"}},"previous":{"fields":{"slug":"zh-CN/show/empty"},"id":"f6e42da0-469f-5ebf-88b7-ae8baf2b0f0c","frontmatter":{"title":"Empty 空状态","localeCode":"zh-CN","icon":"doc-empty"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}