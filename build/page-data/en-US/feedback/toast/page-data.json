{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/feedback/toast","result":{"data":{"current":{"frontmatter":{"title":"Toast","order":67,"brief":"Toast component is used to give timely feedback to user's operations. It could be the result feedback of the operation, such as success, failure, error, warning, etc.","icon":"doc-toast"},"fields":{"type":"feedback"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#other-types","title":"Other Types"},{"url":"#colored-background","title":"Colored Background"},{"url":"#custom-children-with-link","title":"Custom Children with Link"},{"url":"#delay","title":"Delay"},{"url":"#manual-close","title":"Manual Close"},{"url":"#usetoast-hooks","title":"useToast Hooks"}]},{"url":"#api-reference","title":"API Reference"},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria","title":"ARIA"}]},{"url":"#design-tokens","title":"Design Tokens"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 67,\n  \"category\": \"Feedback\",\n  \"title\": \"Toast\",\n  \"subTitle\": \"Toast\",\n  \"icon\": \"doc-toast\",\n  \"width\": \"65%\",\n  \"brief\": \"Toast component is used to give timely feedback to user's operations. It could be the result feedback of the operation, such as success, failure, error, warning, etc.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { Toast } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\nimport { throttle } from 'lodash-es';\\n\\nfunction Demo() {\\n    const opts = {\\n        content: 'Hi, Bytedance dance dance',\\n        duration: 3,\\n    };\\n\\n    const handleClose = () => {\\n        throttled.cancel();\\n    };\\n    const throttleOpts = {\\n        content: 'Hi, Bytedance dance dance',\\n        duration: 10,\\n        onClose: handleClose,\\n    };\\n    const throttled = throttle(() => Toast.info(throttleOpts), 10000, { trailing: false });\\n\\n    return (\\n        <div>\\n            <Button onClick={() => Toast.info(opts)}>Display Toast</Button>\\n            <br />\\n            <br />\\n            <Button onClick={throttled}>Throttled Toast</Button>\\n        </div>\\n    );\\n}\\nrender(Demo);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Other Types\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use different methods to show different Toast including success, warning, error and info.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    let opts = {\\n        content: 'Hi, Bytedance dance dance',\\n        duration: 3,\\n    };\\n\\n    return (\\n        <>\\n            <Button style={{color:`var(--semi-color-success)`}} onClick={() => Toast.success('Hi,Bytedance dance dance')}>Success</Button>\\n            <br />\\n            <br />\\n            <Button type=\\\"warning\\\" onClick={() => Toast.warning(opts)}>\\n                Warning\\n            </Button>\\n            <br />\\n            <br />\\n            <Button type=\\\"danger\\\" onClick={() => Toast.error(opts)}>\\n                Error\\n            </Button>\\n        </>\\n    );\\n}\\nrender(Demo);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Colored Background\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" for a colored background style. Default is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"normal\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    let opts = {\\n        content: 'Hi, Bytedance dance dance',\\n        duration: 3,\\n        theme: 'light',\\n    };\\n\\n    return (\\n        <>\\n            <Button onClick={() => Toast.info(opts)}>Info</Button>\\n            <br />\\n            <br />\\n            <Button style={{color:`var(--semi-color-success)`}} onClick={() => Toast.success(opts)}>Success</Button>\\n            <br />\\n            <br />\\n            <Button type=\\\"warning\\\" onClick={() => Toast.warning(opts)}>\\n                Warning\\n            </Button>\\n            <br />\\n            <br />\\n            <Button type=\\\"danger\\\" onClick={() => Toast.error(opts)}>\\n                Error\\n            </Button>\\n        </>\\n    );\\n}\\nrender(Demo);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Children with Link\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Informational feedback\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { Toast, Typography, Button } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const { Text } = Typography;\\n\\n    let opts = {\\n        content: (\\n            <span>\\n                <Text>Hi, Bytedance dance dance</Text>\\n                <Text link style={{ marginLeft: 12 }}>\\n                    More Info\\n                </Text>\\n            </span>\\n        ),\\n        duration: 3,\\n    };\\n\\n    let multiLineOpts = {\\n        content: (\\n            <>\\n                <div>Hi, Bytedance dance dance</div>\\n                <div style={{ marginTop: 8 }}>\\n                    <Text link>More Info</Text>\\n                    <Text link style={{ marginLeft: 20 }}>\\n                        Later\\n                    </Text>\\n                </div>\\n            </>\\n        ),\\n        duration: 3,\\n    };\\n\\n    return (\\n        <>\\n            <Button onClick={() => Toast.info(opts)}>Display Toast</Button>\\n            <br />\\n            <br />\\n            <Button onClick={() => Toast.info(multiLineOpts)}>Display Multi-line Toast</Button>\\n        </>\\n    );\\n}\\nrender(Demo);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Delay\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"duration\"), \" to set up time delay. By default it closes after 3 seconds.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true hideInDSM\",\n    \"live\": \"true\",\n    \"noInline\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    let opts = {\\n        content: 'Hi, Bytedance dance dance',\\n        duration: 10,\\n    };\\n\\n    return <Button onClick={() => Toast.info(opts)}>Close After 10s</Button>;\\n}\\nrender(Demo);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Manual Close\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"duration\"), \" to 0 if you do not want the Notification to close by itself. In this case, it could only be closed manually.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true hideInDSM\",\n    \"live\": \"true\",\n    \"noInline\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React, { useState } from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const [toastId, setToastId] = useState();\\n    function show() {\\n        if (toastId) {\\n            return;\\n        }\\n        let id = Toast.info(opts);\\n        setToastId(id);\\n    }\\n    function hide() {\\n        Toast.close(toastId);\\n        destroy();\\n    }\\n    function destroy() {\\n        setToastId(null);\\n    }\\n    let opts = {\\n        content: 'Not auto close',\\n        duration: 0,\\n        onClose: destroy,\\n    };\\n    return (\\n        <>\\n            <Button type=\\\"primary\\\" onClick={show}>\\n                Show Toast\\n            </Button>\\n            <br />\\n            <br />\\n            <Button type=\\\"primary\\\" onClick={hide}>\\n                Hide Toast\\n            </Button>\\n        </>\\n    );\\n}\\n\\nrender(Demo);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"useToast Hooks\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Toast.useToast\"), \" to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contextHolder\"), \" that could access context. Created toast will be inserted to where contextHolder is placed.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true hideInDSM\",\n    \"live\": \"true\",\n    \"noInline\": \"true\",\n    \"hideInDSM\": true\n  }, \"import React from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\n\\nconst ReachableContext = React.createContext();\\n\\nfunction Demo(props = {}) {\\n    const [toast, contextHolder] = Toast.useToast();\\n    const config = {\\n        duration: 0,\\n        title: 'This is a success message',\\n        content: <ReachableContext.Consumer>{name => `ReachableContext: ${name}`}</ReachableContext.Consumer>,\\n    };\\n\\n    return (\\n        <ReachableContext.Provider value=\\\"Light\\\">\\n            <div>\\n                <Button\\n                    onClick={() => {\\n                        toast.success(config);\\n                    }}\\n                >\\n                    Hook Toast\\n                </Button>\\n            </div>\\n            {contextHolder}\\n        </ReachableContext.Provider>\\n    );\\n}\\n\\nrender(Demo);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactDOM.createPortal\"), \" to insert toast in a Portal.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }, \"import React, { useRef } from 'react';\\nimport { Toast, Button } from '@douyinfe/semi-ui';\\n\\nconst ReachableContext = React.createContext();\\n\\nconst useCreatePortalInBody = () => {\\n    const wrapperRef = useRef(null);\\n    if (wrapperRef.current === null && typeof document !== 'undefined') {\\n        const div = document.createElement('div');\\n        wrapperRef.current = div;\\n    }\\n    useLayoutEffect(() => {\\n        const wrapper = wrapperRef.current;\\n        if (!wrapper || typeof document === 'undefined') {\\n            return;\\n        }\\n        document.querySelector('.article-wrapper').appendChild(wrapper);\\n        return () => {\\n            document.querySelector('.article-wrapper').appendChild(wrapper);\\n        };\\n    }, []);\\n    return children => wrapperRef.current && ReactDOM.createPortal(children, wrapperRef.current);\\n};\\n\\nfunction Demo(props = {}) {\\n    const [toast, contextHolder] = Toast.useToast();\\n    const createBodyPortal = useCreatePortalInBody();\\n    const config = {\\n        duration: 3,\\n        title: 'This is a success message',\\n        content: <ReachableContext.Consumer>{name => `ReachableContext: ${name}`}</ReachableContext.Consumer>,\\n    };\\n\\n    return (\\n        <ReachableContext.Provider value=\\\"Light\\\">\\n            <div>\\n                <Button\\n                    onClick={() => {\\n                        toast.success(config);\\n                    }}\\n                >\\n                    Hook Toast\\n                </Button>\\n            </div>\\n            {createBodyPortal(\\n                <div style={{ position: 'fixed', top: 0, left: '50%', zIndex: 10000 }}>{contextHolder}</div>\\n            )}\\n        </ReachableContext.Provider>\\n    );\\n}\\n\\nrender(Demo);\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The static methods provided are as follows: Display: You can pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"options\"), \" object or string directly. Methods return the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toastId\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const toastId = Toast.info({ /*...options*/ })\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.info(options || string)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.error(options || string)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.warning(options || string)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.success(options || string)\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Close Manually ( \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toastId\"), \" is the return value of the display methods)\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.close(toastId)\"))), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bottom\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up position bottom\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toast content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"''\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"duration\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Automatic close delay, no auto-close when set to 0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getPopupContainer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Specifies the parent DOM, and the bullet layer will be rendered to the DOM, you need to set 'position: relative`\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => HTMLElement \", \"|\", \" null\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => document.body\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.34.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom icons\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"left\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up position left\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"right\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up position right\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showClose\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle Whether show close button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"textMaxWidth\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Maximum width of content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"450\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"theme\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Style of background fill, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"light\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"normal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"normal\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.0.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"top\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pop-up position top\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zIndex\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Z-index value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1010\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClose\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when closing toast\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The global configuration is set before any method call, and takes effect only once (>= 0.25.0):\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.config(config)\"))), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bottom\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bottom, absolute position\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"duration\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Automatic close delay, no auto-close when set to 0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number(second)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"3\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getPopupContainer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Specifies the parent DOM, and the bullet layer will be rendered to the DOM, you need to set 'position: relative`\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => HTMLElement \", \"|\", \" null\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => document.body\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.23.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"left\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Left, absolute position\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"right\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Right, absolute position\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"top\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Top, absolute position\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zIndex\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Z-index\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1010\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.25.0\")))), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ToastFactory.create(config) => Toast\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"If you need Toast with different configs in your application, you can use ToastFactory.create(config)to create a new Toast (>= 1.23):\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true noInline=true\",\n    \"live\": \"true\",\n    \"noInline\": \"true\"\n  }, \"import React from 'react';\\nimport { Button } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const ToastInCustomContainer = ToastFactory.create({\\n        getPopupContainer: () => document.getElementById('custom-toast-container'),\\n    });\\n    return (\\n        <div>\\n            <Button onClick={() => Toast.info('Toast')}>Default Toast</Button>\\n            <br />\\n            <br />\\n            <Button onClick={() => ToastInCustomContainer.info('Toast in some container')}>\\n                Toast in custom container\\n            </Button>\\n            <div id=\\\"custom-toast-container\\\">custom container</div>\\n        </div>\\n    );\\n}\\nrender(Demo);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Globally Destroy (>= 0.25.0):\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.destroyAll()\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"HookToast\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.useToast\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"v>=1.2.0\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"When you need access Context, you could use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Toast.useToast\"), \" to create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"contextHolder\"), \" and insert to corresponding DOM tree. Toast created by hooks will be able to access the context where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"contextHolder\"), \" is inserted. Hook toast has following methods: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"info\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"success\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"warning\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"error\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"close\"), \".\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Accessibility\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"ARIA\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The role of Toast is alert\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/feedback/toast","next":{"fields":{"slug":"zh-CN/feedback/toast"},"id":"740e5d4e-11ec-5a2d-ad17-55125228d011","frontmatter":{"title":"Toast 提示","localeCode":"zh-CN","icon":"doc-toast"}},"previous":{"fields":{"slug":"zh-CN/feedback/spin"},"id":"ed9ee308-97e3-5a75-b99c-eb77a2d915e5","frontmatter":{"title":"Spin 加载器","localeCode":"zh-CN","icon":"doc-spin"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}