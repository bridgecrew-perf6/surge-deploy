{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/input/taginput","result":{"data":{"current":{"frontmatter":{"title":"TagInput","order":29,"brief":"Taginput is a input component that can add content as a tag.","icon":"doc-tagInput"},"fields":{"type":"input"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#batch-add","title":"Batch Add"},{"url":"#batch-remove","title":"Batch Remove"},{"url":"#disabled","title":"Disabled"},{"url":"#size","title":"Size"},{"url":"#different-validate-status","title":"Different validate status"},{"url":"#prefix--suffix","title":"Prefix / Suffix"},{"url":"#allow-duplicates","title":"Allow Duplicates"},{"url":"#autocomplete","title":"Autocomplete"},{"url":"#limits","title":"Limits"},{"url":"#limit-the-number-of-tags-displayed","title":"Limit the number of tags displayed"},{"url":"#controlled-tag","title":"Controlled Tag"},{"url":"#controlled-input","title":"Controlled Input"},{"url":"#callback","title":"Callback"},{"url":"#focus-management","title":"Focus Management"},{"url":"#custom-taginput-rendering","title":"Custom TagInput rendering"}]},{"url":"#api-reference","title":"API Reference"},{"url":"#methods","title":"Methods"},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria","title":"ARIA"}]},{"url":"#design-tokens","title":"Design Tokens"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 29,\n  \"category\": \"Input\",\n  \"title\": \"TagInput\",\n  \"subTitle\": \"TagInput\",\n  \"icon\": \"doc-tagInput\",\n  \"brief\": \"Taginput is a input component that can add content as a tag.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { TagInput } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"After pressing the Enter key, the input will add value as a tag. If the tag content is an empty string or pure space, it will be filtered.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput\\n        defaultValue={['Semi','Hotsoon','Pipixia']}\\n        placeholder='Please enter...'\\n        onChange={v => console.log(v)}\\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Batch Add\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"separator\"), \" to set the separator to achieve batch input, and its default value is a comma. After version 1.29.0, multiple separators are supported in string[] format.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <>\\n        <TagInput \\n            separator='-' \\n            placeholder='Use `-` for batch input'\\n            onChange={v => console.log(v)}\\n        />\\n        <br/><br/>\\n        <TagInput \\n            separator={['-', '/', '|', '++']}\\n            placeholder='Support multiple separators for batch input'\\n            onChange={v => console.log(v)}\\n        />\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Batch Remove\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showClear\"), \" to set whether to support one-click deletion of all tags and input.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput \\n        showClear \\n        defaultValue={['Semi','Hotsoon']} \\n        placeholder='Please enter...'\\n        onChange={v => console.log(v)}\\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Disabled\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput \\n        disabled \\n        showClear \\n        defaultValue={['Semi','Hotsoon','Pipixia']} \\n        placeholder='Please enter...'\\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Size\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" to set the size of the TagInput, optional: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <>\\n        <TagInput size='small' placeholder='small'/>\\n        <br/><br/>\\n        <TagInput placeholder='default'/>\\n        <br/><br/>\\n        <TagInput size='large' placeholder='large'/>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Different validate status\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"validateStatus: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"warning\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <>\\n        <TagInput placeholder='default'/>\\n        <br/><br/>\\n        <TagInput placeholder='warning' validateStatus='warning'/>\\n        <br/><br/>\\n        <TagInput placeholder='error' validateStatus='error'/>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Prefix / Suffix\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can pass the input box prefix through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prefix\"), \", the input box suffix through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"suffix\"), \", for text or React Node.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The left and right padding is automatically brought when the content passed in by prefix and reactix is text or Icon. If it is a custom ReactNode, the left and right padding is 0.If necessary, you can set it in the ReactNode you passed in.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\nimport { IconVigoLogo, IconGift } from '@douyinfe/semi-icons';\\n\\n() => (\\n    <>\\n        <TagInput prefix={<IconVigoLogo />} showClear/>\\n        <br/><br/>\\n        <TagInput  prefix=\\\"Prefix\\\" showClear/>\\n        <br/><br/>\\n        <TagInput suffix={<IconGift />}/>\\n        <br/><br/>\\n        <TagInput  suffix=\\\"Suffix\\\" showClear/>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Allow Duplicates\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowDuplicates\"), \" to set whether to allow the creation of the same tag.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput\\n        allowDuplicates={false}\\n        defaultValue={['Semi','Hotsoon','Pipixia']} \\n        placeholder='Please enter...'\\n        onChange={v => console.log(v)}\\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Autocomplete\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addOnBlur\"), \" to set whether the current input value is automatically created as a tag when the blur event is triggered.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput\\n        addOnBlur={true}\\n        defaultValue={['Semi','Hotsoon','Pipixia']} \\n        placeholder='Please enter...'\\n        onChange={v => console.log(v)}\\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Limits\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" to limit the number of tags. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onExceed()\"), \" callback will be invoked when the limit is exceeded.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxLength\"), \" to limit the maximum length of a single tag, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onInputExceed()\"), \" callback will be invoked when this value is exceeded.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <>\\n        <TagInput \\n            max={3} \\n            placeholder='max = 3' \\n            onChange={v => console.log(v)}\\n            onExceed={v => {\\n                Toast.warning('Exceeds max');\\n                console.log(v);\\n            }}\\n        />\\n        <TagInput \\n            maxLength={5} \\n            placeholder='maxLength = 5'  \\n            style={{marginTop:12}}\\n            onChange={v => console.log(v)}\\n            onInputExceed={v => {\\n                Toast.warning('Exceeds maxLength');\\n                console.log(v);\\n            }} \\n        />\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Limit the number of tags displayed\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxTagCount\"), \" to limit the number of tags displayed, and the excess will be displayed as +N. You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showRestTagsPopover\"), \" to set whether hover +N displays Popover after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxTagCount\"), \" is exceeded, and you can configure Popover in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"restTagsPopoverProps\"), \" property.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput \\n        maxTagCount={2}\\n        showRestTagsPopover={true}\\n        restTagsPopoverProps={{ position: 'top' }}\\n        defaultValue={['Semi','Hotsoon','Pipixia']} \\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Controlled Tag\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" to set tags, and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" to achieve control of the tags.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\nclass TagInputDemo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            value: ['abc']\\n        };\\n    }\\n    onChange(value) {\\n        this.setState({ value });\\n    }\\n    render() {\\n        return (\\n            <TagInput\\n                value={this.state.value}\\n                onChange={value => {this.onChange(value);}}\\n            />\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Controlled Input\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputValue\"), \" to set input box, and use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onInputChange\"), \" to control the input content.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\nclass TagInputDemo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            value: 'abc'\\n        };\\n    }\\n    handleInputChange(value, event) {\\n        this.setState({ value });\\n    }\\n    render() {\\n        return (\\n            <TagInput\\n                inputValue={this.state.value}\\n                onInputChange={(v,e) => this.handleInputChange(v,e)}\\n            />\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Callback\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <TagInput \\n        defaultValue={['Semi','Hotsoon','Pipixia']} \\n        showClear \\n        onFocus={e =>{console.log(`onFocus`);}} \\n        onBlur={e=>{console.log(`onBlur`);}} \\n        onChange={tag=>{console.log(`onChange \\uFF1A${tag}`);}} \\n        onAdd={tag=>{console.log(`onAdd \\uFF1A${tag}`);}} \\n        onRemove={(v,i)=>{console.log(`onRemove \\uFF1A${v}, index\\uFF1A${i}`);}} \\n        onInputChange={(input,e)=>{console.log(`onInputChange \\uFF1A${input}`);}} \\n    />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Focus Management\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"blur()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"focus()\"), \" methods to manage the focus.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput, Button } from '@douyinfe/semi-ui';\\n\\nclass TagInputDemo extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.ref = React.createRef();\\n        this.handleTagInputFocus=this.handleTagInputFocus.bind(this);\\n    }\\n\\n    handleTagInputFocus(){\\n        this.ref.current.focus();\\n    }\\n\\n    render() {\\n        return (\\n            <>\\n                <TagInput defaultValue={['Semi','Hotsoon']} ref={this.ref} />\\n                <Button style={{marginTop:10}} onClick={this.handleTagInputFocus}>\\n                    focus\\n                </Button>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom TagInput rendering\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderTagItem\"), \" to customize tag rendering.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TagInput, Avatar } from '@douyinfe/semi-ui';\\n\\nclass CustomRender extends React.Component {\\n    constructor(props) {\\n        super(props);\\n        this.state = {\\n            value : ['xiakeman']\\n        };\\n        this.list = [\\n            { \\\"name\\\": \\\"xiakeman\\\", \\\"avatar\\\":  \\\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/avatarDemo.jpeg\\\"},\\n            { \\\"name\\\": \\\"shenyue\\\",  \\\"avatar\\\":  \\\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/bf8647bffab13c38772c9ff94bf91a9d.jpg\\\"},\\n            { \\\"name\\\": \\\"quchenyi\\\", \\\"avatar\\\":  \\\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/dbf7351bb779433d17c4f50478cf42f7.jpg\\\"},\\n            { \\\"name\\\": \\\"wenjiamao\\\", \\\"avatar\\\":  \\\"https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/7abf810ff060ac3387bd027ead92c4e0.jpg\\\"},\\n        ];\\n        this.mapList = new Map(this.list.map( item => [item.name,item]));\\n    }\\n\\n    renderTagItem(value,index) {\\n        const data = this.mapList.get(value);\\n        return (\\n            <div \\n                key={index} \\n                style={{display: 'flex', alignItems: 'center', fontSize: 14, marginRight: 10}}\\n            >\\n                <Avatar \\n                    alt='avatar'\\n                    src={data?data.avatar:'https://sf6-cdn-tos.douyinstatic.com/obj/eden-cn/ptlz_zlp/ljhwZthlaukjlkulzlp/root-web-sites/avatarDemo.jpeg'} \\n                    size=\\\"extra-small\\\" \\n                />\\n                <span style={{ marginLeft: 8 }}>\\n                    {`${value}@semi.com`}\\n                </span>\\n            </div>\\n        );\\n    }\\n\\n    render() {\\n        const { value } = this.state;\\n        return (\\n            <TagInput \\n                value={value} \\n                onChange={value=>this.setState({value})}\\n                renderTagItem={(value,index)=>this.renderTagItem(value,index)}\\n            />\\n        );\\n    }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"addOnBlur\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to automatically create the current input value into a tag when the blur event is triggered\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.20.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"allowDuplicates\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Allows adding the same tag multiple times\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.20.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"autoFocus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set whether to automatically focus during initial rendering\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.29.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultValue\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default tag value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Read-only, disable interaction\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"inputValue\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Controlled input value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maxLength\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Maximum length of a tag\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"max\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Maximum number of tags allowed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.21.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maxTagCount\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The maximum number of tags to be displayed, if exceeded, they will be displayed in the form of +N\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.21.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showRestTagsPopover\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When maxTagCount is exceeded and hover reaches +N, whether to display the remaining content through Popover\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.21.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"restTagsPopoverProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The configuration properties of the popover\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"PopoverProps\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"{}\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.21.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showContentTooltip\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When the tag is too long and truncated, when hovering the tag, whether to display all contents through Tooltip\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.21.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"placeholder\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content to be appear by default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"prefix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prefix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"renderTagItem\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Customize the rendering of items\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value: string, index: number) => React.ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"separator\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Customize the separator\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\", \"|\", \"string[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \",\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0,string[] is supported since 1.29.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether to show the clear button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"React.CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"suffix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Suffix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"validateStatus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Validate status for styling only, one of  \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"warning\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Controlled tag value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string[] \", \"|\", \" undefined\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onAdd\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when tags are added\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(addedValue: string[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onBlur\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input loses focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:React.MouseEvent<HTMLInputElement\", \">\", \") => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when tags changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value:string[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onExceed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when max is exceeded\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value:string[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onFocus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input gets focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:React.MouseEvent<HTMLInputElement\", \">\", \") => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onInputChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value:string,e: React.KeyboardEvent<HTMLInputElement\", \">\", \") => void)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onInputExceed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when maxLength is exceeded\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value:string) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyDown\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keydown\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: React.KeyboardEvent<HTMLInputElement\", \">\", \") => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2.1.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onRemove\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when tags are removed\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(removedValue: string, idx: number) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Methods\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"blur()\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Remove focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"focus()\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Get focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1.19.0\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Accessibility\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"ARIA\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TagInput supports the input of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-label\"), \" to indicate the function of the TagInput;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TagInput will set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-disabled\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-invalid\"), \" according to disabled and validateStatus props;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both the input box and the clear button of TagInput have \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-label\"), \" to indicate the function of the element.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/input/taginput","next":{"fields":{"slug":"zh-CN/input/taginput"},"id":"ef37c190-9de6-5c02-b57c-1cf4d0259a75","frontmatter":{"title":"TagInput 标签输入框","localeCode":"zh-CN","icon":"doc-tagInput"}},"previous":{"fields":{"slug":"zh-CN/input/switch"},"id":"66b2e310-3b04-5ba9-9a05-8f53827513d3","frontmatter":{"title":"Switch 开关","localeCode":"zh-CN","icon":"doc-switch"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}