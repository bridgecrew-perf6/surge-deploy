{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/input/input","result":{"data":{"current":{"frontmatter":{"title":"Input","order":22,"brief":"Input is a basic component for users to enter and edit text.","icon":"doc-input"},"fields":{"type":"input"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#size","title":"Size"},{"url":"#disabled","title":"Disabled"},{"url":"#prefixsuffix","title":"Prefix/Suffix"},{"url":"#addon","title":"Addon"},{"url":"#clear-icon","title":"Clear Icon"},{"url":"#password-mode","title":"Password Mode"},{"url":"#validation","title":"Validation"},{"url":"#controlled-component","title":"Controlled Component"},{"url":"#inputgroup","title":"InputGroup"},{"url":"#textarea","title":"TextArea"},{"url":"#autosize-textarea","title":"Autosize TextArea"},{"url":"#custom-calculated-character-string-length","title":"Custom calculated character string length"}]},{"url":"#api-reference","title":"API Reference","items":[{"url":"#input","title":"Input"},{"url":"#textarea-1","title":"TextArea"}]},{"url":"#methods","title":"Methods"},{"url":"#design-tokens","title":"Design Tokens"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 22,\n  \"category\": \"Input\",\n  \"title\": \"Input\",\n  \"subTitle\": \"Input\",\n  \"icon\": \"doc-input\",\n  \"width\": \"60%\",\n  \"brief\": \"Input is a basic component for users to enter and edit text.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notice = makeShortcode(\"Notice\");\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { Input } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <Input defaultValue='hi' autofocus></Input>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Size\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Support three sizes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <>\\n        <Input placeholder='large' size='large'></Input>\\n        <br/><br/>\\n        <Input placeholder='default'></Input>\\n        <br/><br/>\\n        <Input placeholder='small' size='small'></Input>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Disabled\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <>\\n        <Input defaultValue='enabled input'></Input>\\n        <br/>\\n        <br/>\\n        <Input disabled defaultValue='disbaled input'></Input>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Prefix/Suffix\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input, Typography } from '@douyinfe/semi-ui';\\nimport { IconSearch } from '@douyinfe/semi-icons';\\n\\n() => (\\n    <>\\n        <Input prefix={<IconSearch />} showClear></Input>\\n        <br/><br/>\\n        <Input prefix=\\\"Prefix\\\" showClear></Input>\\n        <br/><br/>\\n        <Input suffix={<IconSearch />} showClear></Input>\\n        <br/><br/>\\n        <Input suffix={<Typography.Text strong type='secondary' style={{ marginRight: 8 }}>Suffix</Typography.Text>} showClear></Input>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Addon\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n() => (\\n    <Input addonBefore=\\\"http://\\\" addonAfter=\\\".com\\\" />\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Clear Icon\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showClear\"), \" to allow clear current value when clicking on clear icon.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <Input showClear defaultValue='click to clear'></Input>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Password Mode\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Hide the content of input\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <Input mode=\\\"password\\\" defaultValue=\\\"123456\\\"></Input>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Validation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can set different \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validateStatus\"), \" to provide style feedback to the user.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n() => (\\n    <>\\n        <Input defaultValue='ies' validateStatus='warning'></Input>\\n        <br/><br/>\\n        <Input defaultValue='ies' validateStatus='error'></Input>\\n        <br/><br/>\\n        <Input defaultValue='ies'></Input>\\n    </>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Controlled Component\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" property if you want to use Input as a controlled component.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input } from '@douyinfe/semi-ui';\\n\\nclass InputDemo extends React.Component {\\n    constructor() {\\n        super();\\n        this.state = {\\n            value: 'controlInput',\\n            value2: 'input'\\n        };\\n        this.onChange = this.onChange.bind(this);\\n    }\\n    onChange(value, e) {\\n        console.log(value);\\n        this.setState({ value });\\n    }\\n    render() {\\n        return (\\n            <>\\n                <Input\\n                    value={this.state.value}\\n                    onChange={this.onChange}>\\n                </Input>\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"InputGroup\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You could put multiple text field input into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputGroup>\"), \" and set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" to the entire group. Supported fields include: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \"\\uFF0C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputNumber\"), \"\\uFF0C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \"\\uFF0C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AutoComplete\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeSelect\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cascader\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DatePicker\")), mdx(Notice, {\n    type: \"primary\",\n    title: \"Notice\",\n    mdxType: \"Notice\"\n  }, mdx(\"div\", null, \"InputGroup does not recommend inserting non-supported elements. Form.InputGroup will perform error aggregation on supported elements without customizing the elements for processing.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input, InputGroup, InputNumber, Select, AutoComplete, DatePicker } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <div>\\n        <InputGroup>\\n            <Input placeholder=\\\"Name\\\" style={{ width: 100 }} />\\n            <InputNumber placeholder=\\\"Score\\\" style={{ width: 140 }} />\\n        </InputGroup>\\n        <br/><br/><br/>\\n        <InputGroup size={'small'}>\\n            <Select style={{ width: '100px' }} defaultValue='home'>\\n                <Select.Option value='home'>Home</Select.Option>\\n                <Select.Option value='work'>Work</Select.Option>\\n            </Select>\\n            <AutoComplete\\n                data={['Beijing Haidian']}\\n                placeholder='Address: '\\n                style={{ width: 180 }}\\n            >\\n            </AutoComplete>\\n        </InputGroup>\\n        <br/><br/><br/>\\n        <InputGroup size={'small'}>\\n            <Select style={{ width: '100px' }} defaultValue='signup'>\\n                <Select.Option value='signup'>Sign Up</Select.Option>\\n                <Select.Option value='signin'>Sign In</Select.Option>\\n            </Select>\\n            <Input placeholder=\\\"Email\\\" style={{ width: 180 }} />\\n        </InputGroup>\\n        <br/><br/><br/>\\n        <InputGroup size={'small'}>\\n            <Input placeholder=\\\"Name\\\" style={{ width: 100 }} />\\n            <DatePicker placeholder=\\\"Birthday\\\" />\\n        </InputGroup>\\n    </div>\\n);\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input, InputGroup, Select, Cascader, TreeSelect } from '@douyinfe/semi-ui';\\n() => {\\n    const treeData = [\\n        {\\n            label: 'Asia',\\n            value: 'Asia',\\n            key: '0',\\n            children: [\\n                {\\n                    label: 'China',\\n                    value: 'China',\\n                    key: '0-0',\\n                    children: [\\n                        { label: 'Beijing', value: 'Beijing', key: '0-0-0' },\\n                        { label: 'Shanghai', value: 'Shanghai', key: '0-0-1' },\\n                    ],\\n                },\\n            ],\\n        },\\n        { label: 'North America', value: 'North America', key: '1' }\\n    ];\\n    return (\\n        <>\\n            <InputGroup>\\n                <Select style={{ width: 100 }} defaultValue='from'>\\n                    <Select.Option value='from'>From: </Select.Option>\\n                    <Select.Option value='to'>To: </Select.Option>\\n                </Select>\\n                <TreeSelect\\n                    style={{ width: 220 }}\\n                    treeData={treeData}\\n                    placeholder=\\\"Please select\\\"\\n                />\\n            </InputGroup>\\n            <br/><br/>\\n\\n            <InputGroup>\\n                <Select style={{ width: 100 }} defaultValue='from'>\\n                    <Select.Option value='from'>From: </Select.Option>\\n                    <Select.Option value='to'>To: </Select.Option>\\n                </Select>\\n                <Cascader\\n                    style={{ width: 220 }}\\n                    treeData={treeData}\\n                    placeholder=\\\"Please select\\\"\\n                />\\n            </InputGroup>\\n        </>\\n    );\\n};\\n\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"TextArea\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Used for multi-line text. You can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxCount\"), \" to restrict text entering and display text count. Since 1.30.0, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showClear\"), \" is supported.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TextArea } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <div>\\n        <TextArea />\\n        <br/><br/>\\n        <TextArea maxCount={100} showClear/>\\n    </div>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Autosize TextArea\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autosize\"), \" to allow TextArea resizing height with content.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { TextArea } from '@douyinfe/semi-ui';\\n() => (\\n    <div>\\n        <TextArea autosize rows={1} />\\n        <br/><br/>\\n        <TextArea autosize maxCount={100} />\\n    </div>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom calculated character string length\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"By setting the getValueLength property, you can customize the length of the character string. With maxLength and minLength, you can support emoji length to calculate according to the visible length.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"What is done inside Semi when getValueLength is passed in:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"maxLength: maxLength is not passed directly to the native input. If the input length exceeds the maximum limit, the legal length character entered last time is used.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minLength: dynamically switch the length of minLength, emoji is calculated according to a length.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"maxCount: compare the values obtained using getValueLength with maxCount\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Input, Typography, Form, Button, TextArea } from '@douyinfe/semi-ui';\\nimport GraphemeSplitter from 'grapheme-splitter';\\n\\n() => {\\n    const [value, setValue] = useState();\\n    function getValueLength(str) {\\n        if (typeof str === 'string') {\\n            const splitter = new GraphemeSplitter();\\n            return splitter.countGraphemes(str);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getTextAreaStrLength(str) {\\n        const filteredStr = str.replace(/\\\\s/g, '');\\n        return filteredStr.length;\\n    }\\n\\n    return (\\n        <div>\\n            <h4>maxLength=10</h4>\\n            <div>\\n                <Typography.Text>Please input following emoji</Typography.Text>\\n                <div><Typography.Text copyable>\\uD83D\\uDC96</Typography.Text></div>\\n                <div><Typography.Text copyable>\\uD83D\\uDC68\\u200D\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D\\uD83D\\uDC66</Typography.Text></div>\\n            </div>\\n            <Input maxLength={10} getValueLength={getValueLength} onChange={setValue} style={{ width: 200, marginTop: 12, marginBottom: 12 }} />\\n            {\\n                value && (\\n                    <div>\\n                        <div><Typography.Text type=\\\"tertiary\\\">{`getValueLength=${getValueLength(value)}`}</Typography.Text></div>\\n                        <div><Typography.Text type=\\\"tertiary\\\">{`length=${value.length}`}</Typography.Text></div>\\n                    </div>\\n                )\\n            }\\n            <br/><br/>\\n            <h4>Form.Input + minLength=4</h4>\\n            <Form layout=\\\"horizontal\\\">\\n                <Form.Input noLabel field=\\\"username\\\" minLength={4} getValueLength={getValueLength} style={{ width: 200 }} />\\n                <Button type=\\\"primary\\\" htmlType=\\\"submit\\\">Submit</Button>\\n            </Form>\\n            <h4>maxCount=10</h4>\\n            <TextArea defaultValue=\\\"semi design\\\" rows={2} maxCount={10} getValueLength={getTextAreaStrLength} style={{ width: 200 }} />\\n        </div>\\n    );\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Answers to some questions:\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Why not just import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grapheme-splitter\"), \" package? The uncompressed size of this package is 200+ kB, which is a bit too large for users who do not need to calculate emoji according to the visible length. Therefore, Semi chose to use the length calculation function as an argument for users to pass in\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Why not modify maxLength dynamically? Modify maxLength dynamically after the input operation is completed, calculate the remaining character length that can be entered. If the maxLength is set to 1, you want to enter a '\\uD83D\\uDC96' with a length of 2, but due to the limitation of input maxLength, you can't enter it at all here, and you can't update maxLength.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Input\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Other attributes are same with html \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input>\"))), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"addonAfter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Addon after input box\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"addonBefore\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Addon before input box\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultValue\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactText\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to disable input\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getValueLength\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom calculated character string length\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value: string) => number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"hideSuffix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to hide suffix if clear icon is shown\\uFF0Cby default the two icon are side by side\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The mode of the input box. The optional value is \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"password\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mode of input\\uFF0Coptional: \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"password\"), \" \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">= v1.3.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"prefix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prefix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Show clear button \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.0.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"large\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"small\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"suffix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Suffix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input type attribute, same with html \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<input>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"validateStatus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Validate status for styling only, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"error\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"warning\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Current value of input box\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactText\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onBlur\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input loses focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input value changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(value:string, e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when clicking clear icon\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onEnterPress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when pressing enter\\uFF08keypress\\uFF09\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onFocus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input gets focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyDown\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keydown\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyPress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keypress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyUp\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keyup\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function(e:event)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })))), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"TextArea\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Other attributes are same with html \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<textarea>\"))), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"autosize\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to allow autosize when content height changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"cols\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getValueLength\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom calculated character string length\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value: string) => number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"maxCount\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The maximum number of characters and display count\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"placeholder\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content to be appear by default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"readonly\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Read-only, not editable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"rows\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The number of visible text lines for the control.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Show clear button \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.30.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onBlur\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input loses focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input value changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value:string, e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when clicking clear icon  \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \">=1.30.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onEnterPress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when pressing enter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onFocus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when input gets focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyDown\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keydown, html event\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyPress\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keypress, html event\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onKeyUp\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when keyup, html event\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e:event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onResize\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback invoked when height changes in autosize mode \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"v>=0.37.0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"({ height:number }) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Methods\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"blur()\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Remove focus\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"focus()\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Get focus\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/input/input","next":{"fields":{"slug":"zh-CN/input/input"},"id":"da29ef30-fc7a-5b2a-adac-d4f585369157","frontmatter":{"title":"Input 输入框","localeCode":"zh-CN","icon":"doc-input"}},"previous":{"fields":{"slug":"zh-CN/input/form"},"id":"0b3efd60-1996-5b99-8e86-b8b1bdddc832","frontmatter":{"title":"Form 表单","localeCode":"zh-CN","icon":"doc-form"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}