{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/input/datepicker","result":{"data":{"current":{"frontmatter":{"title":"DatePicker","order":20,"brief":"The date selector is used to help the user select a compliant, formatted date (time) or date (time) range.","icon":"doc-datepicker"},"fields":{"type":"input"},"tableOfContents":{"items":[{"url":"#when-to-use","title":"When to Use"},{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-use","title":"Basic Use"},{"url":"#picker-density","title":"Picker Density"},{"url":"#with-an-embedded-label","title":"With an Embedded Label"},{"url":"#multiple-date-selection","title":"Multiple Date Selection"},{"url":"#date-and-time-selection","title":"Date and Time Selection"},{"url":"#date-range-selection","title":"Date Range Selection"},{"url":"#date-time-range-selection","title":"Date Time Range Selection"},{"url":"#synchronously-switch-months","title":"Synchronously switch months"},{"url":"#panel-change-callback","title":"Panel Change Callback"},{"url":"#select-week","title":"Select Week"},{"url":"#selection","title":"Selection"},{"url":"#confirm-date-and-time-selection","title":"Confirm Date and Time Selection"},{"url":"#date-and-time-selection-with-shortcuts","title":"Date and Time Selection with Shortcuts"},{"url":"#render-topslotbottomslot","title":"Render TopSlot/BottomSlot"},{"url":"#disable-date-selection","title":"Disable Date Selection"},{"url":"#disable-partial-date-or-time","title":"Disable Partial Date or Time"},{"url":"#custom-display-format","title":"Custom Display Format"},{"url":"#custom-trigger","title":"Custom Trigger"},{"url":"#custom-render-date-content","title":"Custom Render Date Content"},{"url":"#custom-render-date-box","title":"Custom Render Date Box"}]},{"url":"#api-reference","title":"API Reference"},{"url":"#date-and-time-format","title":"Date and Time Format"},{"url":"#design-tokens","title":"Design Tokens"},{"url":"#faq","title":"FAQ"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 20,\n  \"category\": \"Input\",\n  \"title\": \"DatePicker\",\n  \"subTitle\": \"Date Selector\",\n  \"icon\": \"doc-datepicker\",\n  \"brief\": \"The date selector is used to help the user select a compliant, formatted date (time) or date (time) range.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notice = makeShortcode(\"Notice\");\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"When to Use\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When the user needs to enter a date, you can click on the standard input box and pop up the date panel to select.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { DatePicker } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Use\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker onChange={(date, dateString) => console.log(dateString)} style={{ width: 240 }} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Picker Density\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The density can be used to control the size of the picker panel. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compact\"), \" is the small size and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \" is the default size. Support after v1.17.0.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    return (\\n        <div>\\n            <DatePicker type=\\\"dateTime\\\" density='compact' /><br /><br />\\n            <DatePicker type=\\\"dateRange\\\" density='compact' style={{ width: 260 }} />\\n        </div>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"With an Embedded Label\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    return <DatePicker insetLabel=\\\"End date\\\" style={{ width: 240 }} />;\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Multiple Date Selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Multiple\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", can choose multiple dates.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker multiple={true} style={{ width: 240 }} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Date and Time Selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateTime\"), \", can choose date and time.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"If you want to remove the infinite loop scrolling interaction of TimePicker, you can pass timePickerOpts into a specific configuration to close it.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <>\\n                <h4>Default date and time selection</h4>\\n                <DatePicker type=\\\"dateTime\\\" />\\n                <br />\\n                <br />\\n                <h4>Turn off cycled mode</h4>\\n                <DatePicker type=\\\"dateTime\\\" timePickerOpts={{ scrollItemProps: { cycled: false } }} />\\n            </>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Date Range Selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateRange\"), \", can choose the date range.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker type=\\\"dateRange\\\" style={{ width: 260 }} onChange={console.log} />;\\n    }\\n}\\n\")), mdx(Notice, {\n    type: \"primary\",\n    title: \"Note\",\n    mdxType: \"Notice\"\n  }, mdx(\"div\", null, \"When you use range selection, if only one date is selected, onChange will not be triggered at this time. Only when both the start date and the end date are selected will onChange be triggered.\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Date Time Range Selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateTimeRange\"), \", can choose the date range and choose time;\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker type=\\\"dateTimeRange\\\" style={{ width: 380 }} onChange={console.log} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Synchronously switch months\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"version\\uFF1A>= 1.28.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In the scenario of range selection, turning on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"syncSwitchMonth\"), \" means to switch the two panels simultaneously. The default is false.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: Clicking the year button will also switch the two panels synchronously. Switching the year and month from the scroll wheel will not switch the panels synchronously. This ensures the user's ability to select months at non-fixed intervals.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <DatePicker\\n                syncSwitchMonth={true}\\n                type=\\\"dateTimeRange\\\"\\n                style={{ width: 380 }}\\n            />\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Panel Change Callback\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"version\\uFF1A>=1.28.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onPanelChange\"), \" will be called when the month or year of the panel is changed.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <DatePicker\\n                syncSwitchMonth={true}\\n                type=\\\"dateTimeRange\\\"\\n                style={{ width: 380 }}\\n                onPanelChange={(date, dateString) => console.log(date, dateString)}\\n            />\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Select Week\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"daterange\"), \" is used with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startDateOffset\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endDateOffset\"), \" to select range with single click, such as weekly selection and biweekly selection. Support after v1.10.0.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const handleChange = date => {\\n        console.log('date changed', date);\\n    };\\n\\n    return (\\n        <div>\\n            <h4>Choose a week</h4>\\n            <DatePicker\\n                style={{ width: 260 }}\\n                type=\\\"dateRange\\\"\\n                weekStartsOn={1}\\n                startDateOffset={date => dateFns.startOfWeek(date, { weekStartsOn: 1 })}\\n                endDateOffset={date => dateFns.endOfWeek(date, { weekStartsOn: 1 })}\\n                onChange={handleChange}\\n            />\\n            <br />\\n            <br />\\n            <h4>Choose two weeks</h4>\\n            <DatePicker\\n                style={{ width: 260 }}\\n                type=\\\"dateRange\\\"\\n                weekStartsOn={1}\\n                startDateOffset={date => dateFns.startOfWeek(date, { weekStartsOn: 1 })}\\n                endDateOffset={date => dateFns.add(dateFns.endOfWeek(date, { weekStartsOn: 1 }), { days: 7 })}\\n                onChange={handleChange}\\n            />\\n            <br />\\n            <br />\\n            <h4>Select the current day and the next 6 days</h4>\\n            <DatePicker\\n                style={{ width: 260 }}\\n                type=\\\"dateRange\\\"\\n                weekStartsOn={1}\\n                endDateOffset={date => dateFns.add(date, { days: 6 })}\\n                onChange={handleChange}\\n            />\\n            <br />\\n            <br />\\n        </div>\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version:\"), \" > = 0.21.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"month\"), \", can make year-to-month selection.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker defaultValue={new Date()} type=\\\"month\\\" style={{ width: 140 }} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Confirm Date and Time Selection\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version: > = 0.18.0\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For the selection of \\\"datetime\\\" (type = \\\"dateTime\\\") or \\\"datetime range\\\" (type = \\\"dateTimeRange\\\"), you can confirm it before writing the value into the input box. You can pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NeedConfirm\"), \" = true to enable this behavior.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"At the same time, the click callbacks of the \\\"onConfirm\\\" and \\\"onCancel\\\" buttons are supported.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The following example binds three callbacks: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onConfirm\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onCancel\"), \", and you can open the console to see the difference in print information.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: When opening \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"needConfirm\"), \", you need to click the cancel button to close the panel, and clicking the blank area will no longer close the panel (v2.2.0)\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <DatePicker\\n                type=\\\"dateTime\\\"\\n                needConfirm={true}\\n                onConfirm={(...args) => {\\n                    console.log('Confirmed: ', ...args);\\n                }}\\n                onCancel={(...args) => {\\n                    console.log('Canceled: ', ...args);\\n                }}\\n                onChange={(...args) => {\\n                    console.log('Changed: ', ...args);\\n                }}\\n            />\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Date and Time Selection with Shortcuts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Pass parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Presets\"), \" to set shortcuts for date selection.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    constructor() {\\n        this.presets = [\\n            {\\n                text: 'Today',\\n                start: new Date(),\\n                end: new Date(),\\n            },\\n            () => ({\\n                text: 'Tomorrow',\\n                start: new Date(new Date().valueOf() + 1000 * 3600 * 24),\\n                end: new Date(new Date().valueOf() + 1000 * 3600 * 24),\\n            }),\\n        ];\\n    }\\n\\n    render() {\\n        return <DatePicker type=\\\"dateTime\\\" presets={this.presets} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Render TopSlot/BottomSlot\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"topSlot\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottomSlot\"), \", you can customize the rendering of the top and bottom extra areas.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React, { useState, useMemo } from 'react';\\nimport { DatePicker, Typography, Tabs, TabPane, Space } from '@douyinfe/semi-ui';\\nimport { IconBulb } from '@douyinfe/semi-icons';\\n\\nfunction Demo() {\\n    const { Text } = Typography;\\n\\n    const [activeTab, setActiveTab] = useState('1');\\n    const [date, setDate] = useState();\\n    const uedDisabledDate = currentDate => currentDate && currentDate.getDate() > 10 && currentDate.getDate() < 15;\\n    const testDisabledDate = currentDate => currentDate && currentDate.getDate() > 15 && currentDate.getDate() < 25;\\n\\n    const handleTabChange = tab => {\\n        setActiveTab(tab);\\n        setDate();\\n    };\\n\\n    const handleDateChange = value => {\\n        setDate(value);\\n    };\\n\\n    const disabledDate = useMemo(() => (activeTab === '1' ? uedDisabledDate : testDisabledDate), [activeTab]);\\n\\n    const TopSlot = function (props) {\\n        const { style } = props;\\n        return (\\n            <Tabs size=\\\"small\\\" onChange={handleTabChange} activeKey={activeTab} style={{ padding: '12px 20px 0', ...style }}>\\n                <TabPane tab=\\\"UED Schedule\\\" itemKey=\\\"1\\\" />\\n                <TabPane tab=\\\"Test schedule\\\" itemKey=\\\"2\\\" />\\n            </Tabs>\\n        );\\n    };\\n\\n    const BottomSlot = function (props) {\\n        const { style } = props;\\n        return (\\n            <Space style={{ padding: '12px 20px', ...style }}>\\n                <IconBulb style={{ color: 'rgba(var(--semi-amber-5), 1)' }} />\\n                <Text strong style={{ color: 'var(--semi-color-text-2)' }}>\\n                    Please read before finalizing\\n                </Text>\\n                <Text link={{ href: 'https://semi.design/', target: '_blank' }}>Release notice</Text>\\n            </Space>\\n        );\\n    };\\n\\n    const MonthBottomSlot = function (props) {\\n        const { style } = props;\\n        return (\\n            <Space style={{ padding: '12px 20px', ...style }}>\\n                <IconBulb style={{ color: 'rgba(var(--semi-amber-5), 1)' }} />\\n                <Text strong style={{ color: 'var(--semi-color-text-2)' }}>\\n                    please read\\n                </Text>\\n                <Text link={{ href: 'https://semi.design/', target: '_blank' }}>Notice</Text>\\n            </Space>\\n        );\\n    };\\n\\n    return (\\n        <div>\\n            <DatePicker \\n                topSlot={<TopSlot />}\\n                disabledDate={disabledDate}\\n                value={date}\\n                onChange={handleDateChange}\\n                dropdownClassName=\\\"components-datepicker-demo-slot\\\"\\n                placeholder=\\\"Please select a schedule\\\"\\n            />\\n            <br /><br />\\n            <DatePicker\\n                bottomSlot={<BottomSlot />}\\n                placeholder=\\\"Please select release time\\\"\\n            />\\n            <br /><br />\\n            <DatePicker\\n                type=\\\"month\\\"\\n                bottomSlot={<MonthBottomSlot />}\\n                placeholder=\\\"Please select month\\\"\\n            />\\n            <br /><br />\\n            <DatePicker \\n                topSlot={<TopSlot style={{ padding: '8px 12px 0' }} />} \\n                bottomSlot={<BottomSlot style={{ padding: '8px 12px' }} />} \\n                density=\\\"compact\\\"\\n                dropdownClassName=\\\"components-datepicker-demo-slot\\\"\\n            />\\n            <br /><br />\\n            <DatePicker \\n                type=\\\"dateTimeRange\\\"\\n                bottomSlot={<BottomSlot />}\\n                style={{ width: 380 }}\\n                placeholder=\\\"Please select a time range\\\"\\n            />\\n        </div>\\n    );\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".components-datepicker-demo-slot {\\n    \\n    .semi-tabs-content {\\n        padding: 0;\\n    }\\n    \\n    .semi-tabs-bar-line.semi-tabs-bar-top {\\n        border-bottom: none;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Disable Date Selection\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker disabled type=\\\"dateTime\\\" defaultValue={new Date()} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Disable Partial Date or Time\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabledDate\"), \" to disable the specified date, pass in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabledTime\"), \" to disable the specified time, and with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultPickerValue\"), \" you can specify the year and month when the panel is opened.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabledDate\"), \" and\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabledTime\"), \", the accepted input parameters are the current date, the former returns a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boolean\"), \" value, the latter returns an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/en-US/input/timepicker#API_Reference\"\n  }, \"object\"), \" It will be directly passed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TimePicker\"), \" component.\"), mdx(Notice, {\n    type: \"primary\",\n    title: \"Note\",\n    mdxType: \"Notice\"\n  }, mdx(\"div\", null, \"When you use timeZone, the Date of the first parameter is the time under the time zone you choose (similar to the first return value of onChange)\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\nimport * as dateFns from 'date-fns';\\nimport { range } from 'lodash-es';\\n\\nclass App extends React.Component {\\n    constructor(props = {}) {\\n        super(props);\\n\\n        this.today = () => new Date();\\n\\n        this.nextValidMonth = () => {\\n            const nextValidDate = this.today();\\n            nextValidDate.setMonth((nextValidDate.getMonth() + 1) % 12);\\n            return nextValidDate;\\n        };\\n\\n        this.disabledTime = date =>\\n            dateFns.isToday(date)\\n                ? {\\n                    disabledHours: () => [17, 18],\\n                    disabledMinutes: hour => (19 === hour ? range(0, 10, 1) : []),\\n                    disabledSeconds: (hour, minute) => (hour === 20 && minute === 20 ? range(0, 20, 1) : []),\\n                }\\n                : null;\\n\\n        this.disabledTime2 = (date, panelType) => {\\n            if (panelType === 'left') {\\n                return { disabledHours: () => [17, 18] };\\n            } else {\\n                return { disabledHours: () => [12, 13, 14, 15, 16, 17, 18] };\\n            }\\n        };\\n\\n        this.disabledDate = date => {\\n            const deadDate = this.today();\\n            const month = deadDate.getMonth();\\n            deadDate.setDate(28);\\n            deadDate.setMonth((month + 1) % 12);\\n            return date.getTime() < deadDate.getTime();\\n        };\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <div>\\n                    <h4>Disabled 17:00:00-18:00:00 today</h4>\\n                    <DatePicker type=\\\"dateTime\\\" hideDisabledOptions={false} disabledTime={this.disabledTime} />\\n                </div>\\n                <div>\\n                    <h4>Two panels disable different times</h4>\\n                    <DatePicker\\n                        type=\\\"dateTimeRange\\\"\\n                        hideDisabledOptions={false}\\n                        disabledTime={this.disabledTime2}\\n                        style={{ width: 380 }}\\n                    />\\n                </div>\\n                <div>\\n                    <h4>Disable time before the 28th of next month</h4>\\n                    <DatePicker\\n                        type=\\\"dateTimeRange\\\"\\n                        disabledDate={this.disabledDate}\\n                        defaultPickerValue={this.nextValidMonth()}\\n                        style={{ width: 380 }}\\n                    />\\n                </div>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" contains \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"range\"), \", the date can be disabled dynamically according to the rangeStart. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"options\"), \" parameter is supported after 1.9.0\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\nimport * as dateFns from 'date-fns';\\n\\nclass App extends React.Component {\\n    render() {\\n        return (\\n            <div>\\n                <h4>Prohibit selection of previous dates</h4>\\n                <DatePicker\\n                    type={'dateRange'}\\n                    disabledDate={(date, options) => {\\n                        const { rangeStart } = options;\\n                        const startDate = dateFns.parseISO(rangeStart);\\n                        return dateFns.isBefore(date, startDate);\\n                    }}\\n                    style={{ width: 260 }}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Display Format\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Pass parameter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"format\"), \" to custom display format.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\n\\nclass App extends React.Component {\\n    render() {\\n        return <DatePicker format=\\\"yyyy-MM-dd HH:mm\\\" type=\\\"dateTime\\\" defaultValue={new Date()} />;\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Trigger\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version:\"), \" >=0.34.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"By default we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \" component as the trigger for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DatePicker\"), \" component. You can customize this trigger by passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"triggerRender\"), \" method.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React, { useState, useCallback, useMemo } from 'react';\\nimport * as dateFns from 'date-fns';\\nimport { DatePicker, Button } from '@douyinfe/semi-ui';\\nimport { IconClose, IconChevronDown } from '@douyinfe/semi-icons';\\n\\nfunction Demo() {\\n    const [date, setDate] = useState(new Date());\\n    const formatToken = 'yyyy-MM-dd';\\n    const onChange = useCallback(date => {\\n        setDate(date);\\n    }, []);\\n    const onClear = useCallback(e => {\\n        e && e.stopPropagation();\\n        setDate(null);\\n    }, []);\\n\\n    const closeIcon = useMemo(() => {\\n        return date ? <IconClose onClick={onClear} /> : <IconChevronDown />;\\n    }, [date]);\\n\\n    return (\\n        <DatePicker\\n            onChange={onChange}\\n            value={date}\\n            format={formatToken}\\n            triggerRender={({ placeholder }) => (\\n                <Button theme={'light'} icon={closeIcon} iconPosition={'right'}>\\n                    {(date && dateFns.format(date, formatToken)) || placeholder}\\n                </Button>\\n            )}\\n        />\\n    );\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Render Date Content\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version\\uFF1A\"), \">=1.4.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderDate: (dayNumber: number, fullDate: string) => ReactNode\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dayNumber\"), \": such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"13\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fullDate\"), \": such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2020-08-13\"), \".\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker, Tooltip } from '@douyinfe/semi-ui';\\n\\nfunction Demo() {\\n    const dateStyle = {\\n        width: '100%',\\n        height: '100%',\\n        border: '1px solid var(--semi-color-primary)',\\n        display: 'flex',\\n        justifyContent: 'center',\\n        alignItems: 'center',\\n    };\\n    const renderDate = (dayNumber, fullDate) => {\\n        if (dayNumber === 1) {\\n            return (\\n                <Tooltip content={'Always Day 1'}>\\n                    <div style={dateStyle}>\\n                        {dayNumber}\\n                    </div>\\n                </Tooltip>\\n            );\\n        }\\n        return dayNumber;\\n    };\\n    return <DatePicker renderDate={renderDate} />;\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Custom Render Date Box\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Version\\uFF1A\"), \">=1.4.0\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderFullDate: (dayNumber: number, fullDate: string, dayStatus: object) => ReactNode\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStatus\"), \" is this status of current date box. The included keys are as follows.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"type DayStatusType = {\\n    isToday?: boolean,\\n    isSelected?: boolean,\\n    isDisabled?: boolean,\\n    isSelectedStart?: boolean,\\n    isSelectedEnd?: boolean,\\n    isInRange?: boolean,\\n    isHover?: boolean,\\n    isOffsetRangeStart?: boolean,\\n    isOffsetRangeEnd?: boolean,\\n    isHoverInOffsetRange?: boolean,\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { DatePicker } from '@douyinfe/semi-ui';\\nimport classNames from 'classnames';\\n\\nfunction Demo() {\\n    const renderFullDate = (dayNumber, fullDate, dayStatus) => {\\n        const { isInRange, isHover, isSelected, isSelectedStart, isSelectedEnd } = dayStatus;\\n        const prefix = 'components-datepicker-demo';\\n\\n        const dateCls = classNames({\\n            [`${prefix}-day-inrange`]: isInRange,\\n            [`${prefix}-day-hover`]: isHover,\\n            [`${prefix}-day-selected`]: isSelected,\\n            [`${prefix}-day-selected-start`]: isSelectedStart,\\n            [`${prefix}-day-selected-end`]: isSelectedEnd,\\n        });\\n\\n        const dayStyle = {\\n            display: 'flex',\\n            alignItems: 'center',\\n            justifyContent: 'center',\\n            width: '80%',\\n            height: '80%',\\n            borderRadius: '50%',\\n        };\\n\\n        return (\\n            <div style={dayStyle} className={dateCls}>\\n                {dayNumber}\\n            </div>\\n        );\\n    };\\n\\n    return <DatePicker style={{ width: 260 }} type={'dateRange'} renderFullDate={renderFullDate} />;\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \".components-datepicker-demo-day-inrange,\\n.components-datepicker-demo-day-hover {\\n    background: var(--semi-color-primary-light-hover);\\n}\\n\\n.components-datepicker-demo-day-selected,\\n.components-datepicker-demo-day-selected-start,\\n.components-datepicker-demo-day-selected-end {\\n    color: var(--semi-color-bg-2);\\n    background: var(--semi-color-primary);\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Properties\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"autoAdjustOverflow\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether the floating layer automatically adjusts its direction when it is blocked\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.34.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"autoFocus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Automatic access to focus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.10.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"autoSwitchDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When false is passed in, the date will not be automatically switched when the year and year are changed through the left and right buttons on the top of the panel and the drop-down menu\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.13.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"bottomSlot\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Render the bottom extra area\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.22.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"className\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Class name\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultOpen\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Panel displays or hides by default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultPickerValue\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default panel date\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\", \"|\", \"Date\", \"|\", \"number\", \"|\", \"string[]\", \"|\", \"Date[]\", \"|\", \"number[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultValue\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Date\", \"|\", \"number\", \"|\", \"string[]\", \"|\", \"Date[]\", \"|\", \"number[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"density\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Density of picker panel, one of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"default\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"compact\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"default\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.17.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Is it disabled?\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabledDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The date is prohibited from the judgment method, and the date is prohibited when returned to true. Options parameter supported after 1.9.0 and rangeEnd supported after 1.29\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(date: Date, options: { rangeStart: string, rangeEnd: string }) => boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() = > false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabledTime\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Time prohibition configuration, the return value will be transparently passed to \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/en-US/input/timepicker#API_Reference\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"TimePicker\")), \" as a parameter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(date: Date \", \"|\", \" Date[], panelType?: string) => ({ \", mdx(\"br\", null), \"disabledHours:() => number[], \", mdx(\"br\", null), \"disabledMinutes: (hour: number) => number[], \", mdx(\"br\", null), \"disabledSeconds: (hour: number, minute: number) => number[] })\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.36.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabledTimePicker\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Disable time selection or not.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.32.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"dropdownClassName\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS classname for drop-down menu\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.13.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"dropdownStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Inline style of drop-down menu\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.13.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"endDateOffset\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When type is dateRange, set the end date of the selected range\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(selectedDate?: Date) => Date;\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.10.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"format\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Date string format displayed in the input box\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Corresponding to type: For details, see \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"#Date%20and%20Time%20Format\"\n  }, \"Date and Time Format\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"getPopupContainer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Specifies the parent DOM, and the bullet layer will be rendered to the DOM, you need to set 'position: relative`\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"function():HTMLElement\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() = > document.body\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"inputReadOnly\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Is the text box readonly\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"inputStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input box style\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"insetLabel\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prefix label, lower priority than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"prefix\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\", \"|\", \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"max\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When multiple is set to true, the number of selected, non-pass or value is null\", \"|\", \"undefined, unlimited.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"multiple\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether you can choose multiple, only type = \\\"date\\\" is supported\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"needConfirm\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Do you need to \\\"confirm selection\\\", only `type= \\\"dateTime\\\"\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\\"dateTimeRange\\\"` works.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"open\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Controlled properties displayed or hidden by panels\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"placeholder\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Input box prompts text\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'Select date'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"position\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Floating layer position, optional value with \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/en-US/show/popover#API%20Reference\"\n  }, \"Popover #API Reference \\xB7 position\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'bottomLeft'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"prefix\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Prefix content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\", \"|\", \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"presets\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Date Time Shortcut\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Array < {start: string\", \"|\", \"Date\", \"|\", \"number, end: string\", \"|\", \"Date\", \"|\", \"number, text: string}\", \"|\", \" function(): {start: string\", \"|\", \"Date\", \"|\", \"number, end: string\", \"|\", \"Date\", \"|\", \"number, text: string} >\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"rangeSeparator\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom range type picker separator of input trigger\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'~'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.31.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"renderDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom date display content\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(dayNumber, fullDate) => ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.4.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"renderFullDate\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom display date box\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(dayNumber, fullDate, dayStatus) => ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.4.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Do you show the clear button?\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.35.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"size\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Size, optional: \\\"small,\\\" \\\"default,\\\" \\\"large\\\"\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'default'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"spacing\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The distance between the pop-up layer and the children element\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"4\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.9.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"startDateOffset\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"When type is dateRange, set the start date of the selected range\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(selectedDate?: Date) => Date;\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.10.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"syncSwitchMonth\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"In the scene of range, it supports synchronous switching of the month of the dual panel\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.28.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"timePickerOpts\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"For other parameters that can be transparently passed to the time selector, see \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"/en-US/input/timepicker#API%20Reference\"\n  }, \"TimePicker\\xB7API Reference\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"object\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.1.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"topSlot\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Render the top extra area\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.22.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"triggerRender\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Custom trigger rendering method\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"({ placeholder: string }) => ReactNode\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.34.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type, optional value: \\\"date\\\", \\\"dateRange\\\", \\\"dateTime\\\", \\\"dateTimeRange\\\", \\\"month\\\"\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"'date'\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(type \\\"month\\\") \", mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.21.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Controlled value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\", \"|\", \" Date\", \"|\", \"number\", \"|\", \" string[]\", \"|\", \"Date[]\", \"|\", \"number[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"weekStartsOn\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Take the day of the week as the first day of the week, 0 for Sunday, 1 for Monday, and so on.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onBlur\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when focus is lost\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: domEvent) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => {}\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.0.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onCancel\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Cancel the callback when selected, enter the reference as the value of the last confirmed selection, only \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"type\"), \" equals \\\"dateTime\\\"or \\\"dateTimeRange\\\" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"needConfirm\"), \" equals true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(date: Date\", \"|\", \"Date[], dateStr: string\", \"|\", \"string[]) => void) \", mdx(\"br\", null), \"Before 1.0.0, it was (dateStr: string\", \"|\", \"string [], date: Date\", \"|\", \"Date[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.18.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A callback when the value changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(date: Date\", \"|\", \"Date[], dateStr: string\", \"|\", \"string[]) => void) \", mdx(\"br\", null), \"Before 1.0.0, it was (dateStr: string\", \"|\", \"string [], date: Date\", \"|\", \"Date[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onClear\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A callback when click the clear button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: domEvent) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => {}\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.16.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onConfirm\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Confirm the callback at the time of selection, enter the reference as the value of the current selection, only \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"type\"), \" equals \\\"dateTime\\\" or \\\"dateTimeRange\\\" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"needConfirm\"), \" equals true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(date: Date\", \"|\", \"Date[], dateStr: string\", \"|\", \"string[]) => void) \", mdx(\"br\", null), \"Before 1.0.0, it was (dateStr: string\", \"|\", \"string [], date: Date\", \"|\", \"Date[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"0.18.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onFocus\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when focus is obtained\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(e: domEvent) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => {}\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.0.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onOpenChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Panel displays or hides callbacks to state switches\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(status: boolean) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onPanelChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when the year or date of the panel is switched\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(date: DateType\", \"|\", \"DateType[], dateStr: StringType\", \"|\", \"StringType[])=>void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.28.0\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onPresetClick\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when click preset button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(item: Object, e: Event) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"() => {}\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"1.24.0\")))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Date and Time Format\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Adopted in the semi-ui component library \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://date-fns.org/v2.9.0/docs/Getting-Started\"\n  }, \"date-fns(v2.9.0)\"), \" As a date and time engine, formatting token means the following:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"y\\\"\"), \": Year\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"M\\\"\"), \": month\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"d\\\"\"), \": day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"H\\\"\"), \": hours\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"h\\\"\"), \": hours (12h)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"m\\\"\"), \": minutes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"s\\\"\"), \": seconds\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The default date time is formatted to:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"date\\\"\"), \"(date): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"yyyy-mm-dd\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"dateTime\\\"\"), \"(date and time)\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"yyyy-mm-dd HH:mm:ss\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"month\\\"\"), \"(month): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"yyyy-MM\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"dateRange\\\"\"), \"(Date Range): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"yyyy-mm-dd ~ yyyy-mm-dd\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"dateTimeRange\\\"\"), \"(Date and Time Range): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"yyyy-mm-dd HH:mm:ss ~ yyyy-mm-dd HH:mm:ss\\\"\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Multiple dates or times are used by default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\",\\\"\"), \" (English comma) separated.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"More token available \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://date-fns.org/v2.9.0/docs/Unicode-Tokens\"\n  }, \"Date-fns official website\")))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"FAQ\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Date time picker, when you choose time, minute and second, you don't want to scroll infinitely. How to achieve the effect?\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This behavior can be controlled by a specific switch in timePickerOpts, timePickerOpts={{scrollItemProps: {cycled: false}}}, and cycled is set to false\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"How to set the default display time when the panel is opened?\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"You can use the defaultPickerValue property.\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/input/datepicker","next":{"fields":{"slug":"zh-CN/input/datepicker"},"id":"37d9c555-8a6f-501f-a7a0-46586ef2206f","frontmatter":{"title":"DatePicker 日期选择器","localeCode":"zh-CN","icon":"doc-datepicker"}},"previous":{"fields":{"slug":"zh-CN/input/checkbox"},"id":"c2ea4206-0e2a-5951-92ed-8e5a9e200ece","frontmatter":{"title":"Checkbox 复选框","localeCode":"zh-CN","icon":"doc-checkbox"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}