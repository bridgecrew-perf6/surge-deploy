{"componentChunkName":"component---src-templates-post-template-js","path":"/en-US/input/slider","result":{"data":{"current":{"frontmatter":{"title":"Slider","order":27,"brief":"Slider is used to help users quickly enter a numeric value or range.","icon":"doc-slider"},"fields":{"type":"input"},"tableOfContents":{"items":[{"url":"#demos","title":"Demos","items":[{"url":"#how-to-import","title":"How to import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#with-input","title":"With Input"},{"url":"#tooltip","title":"Tooltip"},{"url":"#with-tag","title":"With Tag"},{"url":"#segmented-background","title":"Segmented Background"},{"url":"#controlled-component","title":"Controlled Component"},{"url":"#vertical","title":"Vertical"}]},{"url":"#api-reference","title":"API Reference"},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria","title":"ARIA"}]},{"url":"#design-tokens","title":"Design Tokens"}]},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"localeCode\": \"en-US\",\n  \"order\": 27,\n  \"category\": \"Input\",\n  \"title\": \"Slider\",\n  \"subTitle\": \"Slider\",\n  \"icon\": \"doc-slider\",\n  \"brief\": \"Slider is used to help users quickly enter a numeric value or range.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar DesignToken = makeShortcode(\"DesignToken\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Demos\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"How to import\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"import\",\n    \"import\": true\n  }, \"import { Slider } from '@douyinfe/semi-ui';\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Basic Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"range={true}\"), \" to allow slider slide from both sides.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <div>\\n        <div>\\n            <div>Default</div>\\n            <Slider aria-label='Slider default' showBoundary={true}></Slider>\\n        </div>\\n        <br/>\\n        <br/>\\n        <div>\\n            <div>Range</div>\\n            <Slider aria-label='Slider range' defaultValue={[20, 60]} range></Slider>\\n        </div>\\n        <br/>\\n        <br/>\\n        <div>\\n            <div>Disabled</div>\\n            <Slider aria-label='Slider disabled' defaultValue={40} disabled></Slider>\\n        </div>\\n    </div>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"With Input\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Synchronize slider with input value.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider, InputNumber } from '@douyinfe/semi-ui';\\n\\nclass InputSlider extends React.Component {\\n    constructor(props) {\\n        super();\\n        this.state = { value: 10 };\\n        this.getSliderValue = this.getSliderValue.bind(this);\\n    }\\n\\n    getSliderValue(value) {\\n        if (isNaN(Number(value))){\\n            return;\\n        }\\n        this.setState({ value: value / 1 });\\n    }\\n\\n    render() {\\n        const { value } = this.state;\\n        return (\\n            <div>\\n                <div style={{ width: 320, marginRight: 15 }}>\\n                    <Slider step={1} value={value} onChange={(value) => (this.getSliderValue(value))} ></Slider>\\n                </div>\\n                <InputNumber onChange={(v) => this.getSliderValue(v)} style={{width: 100}} value={value} min={0} max={100} />\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Tooltip\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tipFormatter\"), \" to format Tooltip content or set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tipFormatter={null}\"), \"to hide Tooltip.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <div>\\n        <Slider tipFormatter={v => (`${v}%`)} />\\n        <br/>\\n        <br/>\\n        <Slider tipFormatter={null} />\\n    </div>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"With Tag\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"marks\"), \" to label measures on sliders.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <div>\\n        <div>step=10</div>\\n        <Slider step={10} marks={{ 0: '0', 10: '10', 20: '20', 30: '30', 40: '40', 50: '50', 100: '100' }} defaultValue={[10, 100]} range={true}></Slider>\\n        <br/>\\n        <br/>\\n        <div>step=0.1</div>\\n        <Slider step={0.1} marks={{ 0.1: '0.1', 0.2: '0.2', 0.3: '0.3', 0.4: '0.4', 0.5: '0.5' }} min={0} max={1} defaultValue={[0.1, 0.5]} range={true}></Slider>\\n        <br/>\\n        <br/>\\n        <div>Marks</div>\\n        <Slider marks={{ 20: '20c', 40: '40c' }} defaultValue={[0, 100]} range={true} ></Slider>\\n        <br/>\\n        <br/>\\n        <div>Inclued</div>\\n        <Slider marks={{ 20: '20c', 40: '40c' }} included={false} defaultValue={[0, 100]} range={true}></Slider>\\n    </div>\\n);\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Segmented Background\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To create a slider with segmented background, you could use CSS property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"linear-gradient\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"railStyle\"), \" along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" to change background dynamically\\u3002\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider } from '@douyinfe/semi-ui';\\n\\nclass SegSlider extends React.Component {\\n    constructor(props) {\\n        super();\\n        this.state = { value: [20, 60] };\\n        this.changeValue = this.changeValue.bind(this);\\n        this.getRailStyle = this.getRailStyle.bind(this);\\n    }\\n\\n    changeValue(value) {\\n        this.setState({ value });\\n    }\\n\\n    getRailStyle(range) {\\n    // color of second segment inherits from .semi-slider-track\\n        const color = ['var(--semi-color-danger)', 'transparent', 'var(--semi-color-success)'];\\n        const gradientPos = this.state.value.map(val => \\n            ((val - range[0]) / (range[1] - range[0])).toFixed(2) * 100\\n        );\\n        const style = {\\n            background: `linear-gradient(to right, ${color[0]} ${gradientPos[0]}%, ${color[1]} ${gradientPos[0]}%, ${color[1]} ${gradientPos[1]}%, ${color[2]} ${gradientPos[1]}%)`\\n        };\\n        return style;\\n    }\\n\\n    render() {\\n        const range = [10, 100];\\n        const railStyle = this.getRailStyle(range);\\n        return (\\n            <Slider\\n                range\\n                min={range[0]}\\n                max={range[1]}\\n                onChange={this.changeValue}\\n                railStyle={railStyle}\\n                defaultValue={this.state.value}\\n            />\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Controlled Component\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" property if you want to use Slider as a controlled component.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider, Button } from '@douyinfe/semi-ui';\\n\\nclass ControllSlider extends React.Component {\\n    constructor(props) {\\n        super();\\n        this.state = { value: 10 };\\n        this.changeValue = this.changeValue.bind(this);\\n    }\\n\\n    changeValue() {\\n        this.setState({ value: this.state.value + 10 });\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <Button onClick={this.changeValue} style={{ marginRight: 20 }}>Click to change value</Button>\\n                <br/>\\n                <br/>\\n                <Slider value={this.state.value}></Slider>\\n            </div>\\n        );\\n    }\\n}\\n\")), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Vertical\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }, \"import React from 'react';\\nimport { Slider } from '@douyinfe/semi-ui';\\n\\n() => (\\n    <div>\\n        <div style={{height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block'}}>\\n            <Slider vertical></Slider>\\n        </div>\\n        <div style={{height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block'}}>\\n            <Slider vertical verticalReverse></Slider>\\n        </div>\\n        <div style={{height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block'}}>\\n            <Slider vertical range defaultValue={[20, 60]}></Slider>\\n        </div>\\n        <div style={{height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block'}}>\\n            <Slider vertical verticalReverse range defaultValue={[20, 60]}></Slider>\\n        </div>\\n        <div style={{height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block'}}>\\n            <Slider vertical range marks={{ 20: '20c', 40: '40c' }} step={10} defaultValue={[20, 60]}></Slider>\\n        </div>\\n        <div style={{height: 300, marginLeft: 30, marginTop: 10, paddingRight: 30, display: 'inline-block'}}>\\n            <Slider vertical verticalReverse range marks={{ 20: '20c', 40: '40c' }} step={10} defaultValue={[20, 60]}></Slider>\\n        </div>\\n    </div>\\n);\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"API Reference\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Instructions\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Version\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"defaultValue\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" number[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Disable slider\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"included\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Takes effect when \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"marks\"), \" is not null, true means containment and false means coordination\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"marks\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tick mark of Slider, type of key must be number, and must in closed interval \", \"[min, max]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Record<number, string \", \">\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"max\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Maximum value of the slider.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"100\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"min\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Minimum value of the slider.\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"railStyle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Style for slide rail\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSSProperties\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0.31.0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"range\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether it is allow to move slider from both sides\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"showBoundary\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether show max/min value when hover\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"step\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Increment between successive values\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tipFormatter\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Format Tooltip content, by default display current value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value: string \", \"|\", \" number \", \"|\", \" boolean \", \"|\", \" (string \", \"|\", \" number \", \"|\", \" boolean)[]) => any\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"v => v\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"tooltipVisible\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to display tooltip all the time\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set current value, used in controlled component\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number \", \"|\", \" number[]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"vertical\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Toggle whether to display slider vertically\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"verticalReverse\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Vertical but reverse direction >=1.29.0\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onAfterChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Triggered when onmouseup is invoked, passed in current value as params\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value: number \", \"|\", \" number[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"onChange\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback function when slider value changes\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"(value: number \", \"|\", \" number[]) => void\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Accessibility\"), mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"ARIA\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The element serving as the focusable slider control has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role\"), \" 'slider'.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The slider element has the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuenow\"), \" property set to a decimal value representing the current value of the slider.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The slider element has the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuemin\"), \" property set to a decimal value representing the minimum allowed value of the slider.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The slider element has the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuemax\"), \" property set to a decimal value representing the maximum allowed value of the slider.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the slider is vertically oriented, it has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-orientation\"), \" set to vertical.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the value of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuenow\"), \" is not user-friendly, e.g., the day of the week is represented by a number, support setting API \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuetext\"), \" property to a string that makes the slider value understandable, e.g., \\\"Monday\\\". And you can use API \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"getAriaValueText(value)\"), \" to specify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuetext\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supporting API \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-label\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-labelledby\"), \" to specify Slider label.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Design Tokens\"), mdx(DesignToken, {\n    mdxType: \"DesignToken\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"en-US/input/slider","next":{"fields":{"slug":"zh-CN/input/slider"},"id":"22884bb1-cb8b-524d-bfe1-826851bb1836","frontmatter":{"title":"Slider 滑动选择器","localeCode":"zh-CN","icon":"doc-slider"}},"previous":{"fields":{"slug":"zh-CN/input/select"},"id":"9f407641-0204-5f9a-b67f-edd4f798124a","frontmatter":{"title":"Select 选择器","localeCode":"zh-CN","icon":"doc-select"}}}},"staticQueryHashes":["1348983216","1348983216","1477422646","2732170773","63159454"]}